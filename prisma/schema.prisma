generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  password      String
  firstName     String?
  lastName      String?
  role          String      @default("student") // admin, student, teacher, mentor, assistant, co_teacher, education_office_head, department_admin
  groupId       String?
  canHelp       String?     // Чем могу быть полезен
  lookingFor    String?     // Что ищу
  mentorGroupIds Json?      // Группы для ментора (массив ID групп)
  status        String      @default("ACTIVE") // ACTIVE, EXPELLED, ACADEMIC_LEAVE
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  sessions      Session[]
  userGroups    UserGroup[]
  group         Group?      @relation(fields: [groupId], references: [id])
  telegramUser  TelegramUser?
  homeworkSubmissions HomeworkSubmission[]
  assignedSubjects Subject[] // Предметы для преподавателя (deprecated, use teacherSubjects)
  homeworkComments HomeworkComment[] @relation("HomeworkCommentAuthor") // Комментарии к работам
  teacherSubjects      SubjectTeacher[]
  uploadedDocuments    SubjectDocument[]
  markedAttendance     Attendance[] @relation("AttendanceMarker")
  studentAttendance    Attendance[] @relation("AttendanceStudent")
  recordedExams        ExamResult[] @relation("ExamRecorder")
  studentExams         ExamResult[] @relation("ExamStudent")
  mentorMeetings       MentorMeeting[] @relation("MentorMeetings")
  studentMeetings      MentorMeeting[] @relation("StudentMeetings")
  forumTopics          ForumTopic[]
  forumPosts           ForumPost[]
  subgroupMemberships  SubgroupStudent[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  semester    String?
  year        String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  schedules   Schedule[]
  userGroups  UserGroup[]
  users       User[]
  homework    Homework[]
  subgroups   Subgroup[]
  exams       Exam[]
  forumTopics ForumTopic[]

  @@map("groups")
}

model Subject {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  instructor  String?
  lectorId    String?    // ID преподавателя (deprecated, use teachers)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  schedules   Schedule[]
  homework    Homework[]
  lector      User?      @relation(fields: [lectorId], references: [id])
  teachers    SubjectTeacher[]
  documents   SubjectDocument[]
  resources   ExternalResource[]
  subgroups   Subgroup[]
  exams       Exam[]
  forumTopics ForumTopic[]

  @@map("subjects")
}

model Schedule {
  id              String       @id @default(cuid())
  subjectId       String
  groupId         String?
  subgroupId      String?
  date            DateTime
  dayOfWeek       Int
  startTime       String
  endTime         String
  location        String?
  eventType       String?
  description     String?
  videoUrl        String?      // Ссылка на запись занятия (Яндекс.Диск)
  recordingStatus String?      // NOT_RECORDED, RECORDING, UPLOADED, ERROR
  zoomMeetingId   String?      // ID встречи Zoom
  isActive        Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  group           Group?       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  subject         Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subgroup        Subgroup?    @relation(fields: [subgroupId], references: [id])
  attendance      Attendance[]
  resources       ExternalResource[]

  @@map("schedules")
}

model UserGroup {
  id                     String   @id @default(cuid())
  userId                 String
  groupId                String
  subgroupCommerce       Int?
  subgroupTutorial       Int?
  subgroupFinance        Int?
  subgroupSystemThinking Int?
  createdAt              DateTime @default(now())
  group                  Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("user_groups")
}

model TelegramUser {
  id            String   @id @default(cuid())
  userId        String   @unique
  telegramId    String   @unique
  chatId        String
  username      String?
  firstName     String?
  lastName      String?
  isActive      Boolean  @default(true)
  notifications Boolean  @default(true)
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("telegram_users")
}

model BotSettings {
  id                   String   @id @default(cuid())
  telegramBotToken     String?
  openaiApiKey         String?
  webhookUrl           String?
  isActive             Boolean  @default(false)
  notificationsEnabled Boolean  @default(true)
  reminderMinutes      Int      @default(30)
  dailySummaryTime     String   @default("07:00")
  updatedAt            DateTime @updatedAt
  createdAt            DateTime @default(now())
  
  @@map("bot_settings")
}

model Homework {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String?  // MDX контент задания
  taskUrl     String?  // Ссылка на задание
  deadline    DateTime
  materials   Json?    // Дополнительные материалы (массив объектов)
  subjectId   String
  groupId     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  group       Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  submissions HomeworkSubmission[]
  
  @@map("homework")
}

model HomeworkSubmission {
  id          String   @id @default(cuid())
  homeworkId  String
  userId      String
  content     String?  // MDX контент работы студента
  submissionUrl String? // Ссылка на выполненное задание
  status      String   @default("NOT_SUBMITTED") // NOT_SUBMITTED, SUBMITTED, REVIEWED
  grade       Int?     // Оценка (1-5 или 1-100)
  comment     String?  // Комментарий преподавателя (MDX)
  feedback    String?  // Развернутая обратная связь (MDX)
  submittedAt DateTime?
  reviewedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  homework    Homework @relation(fields: [homeworkId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    HomeworkComment[] // Inline комментарии к работе
  
  @@unique([homeworkId, userId])
  @@map("homework_submissions")
}

model HomeworkComment {
  id           String   @id @default(cuid())
  submissionId String   // ID работы студента
  authorId     String   // ID автора комментария (обычно лектор)
  content      String   // Текст комментария
  startOffset  Int      // Начальная позиция выделенного текста
  endOffset    Int      // Конечная позиция выделенного текста
  selectedText String   @db.Text // Выделенный текст для контекста
  resolved     Boolean  @default(false) // Помечен ли как решенный
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  submission   HomeworkSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  author       User              @relation("HomeworkCommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  
  @@map("homework_comments")
}

// Новые модели для КТП

model SubjectTeacher {
  id        String   @id @default(cuid())
  subjectId String
  userId    String
  role      String   // TEACHER, ASSISTANT, CO_TEACHER
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([subjectId, userId])
  @@map("subject_teachers")
}

model SubjectDocument {
  id         String   @id @default(cuid())
  subjectId  String
  type       String   // RPD (Рабочая программа дисциплины), ANNOTATION, MATERIALS
  fileName   String
  fileUrl    String   // URL файла в хранилище
  fileSize   Int?
  uploadedBy String   // userId
  uploadedAt DateTime @default(now())
  isActive   Boolean  @default(true)
  
  subject    Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  uploader   User     @relation(fields: [uploadedBy], references: [id])
  
  @@map("subject_documents")
}

model ExternalResource {
  id          String    @id @default(cuid())
  subjectId   String?
  scheduleId  String?
  type        String    // EOR, ZOOM, CHAT, MIRO, EXCEL, VIDEO, OTHER
  title       String
  url         String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  
  subject     Subject?  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  schedule    Schedule? @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  
  @@map("external_resources")
}

model Subgroup {
  id          String   @id @default(cuid())
  groupId     String
  subjectId   String?  // null = общая подгруппа для всех предметов
  name        String   // "Подгруппа 1", "Подгруппа Коммерция" и т.д.
  number      Int      // 1, 2, 3...
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  subject     Subject? @relation(fields: [subjectId], references: [id])
  students    SubgroupStudent[]
  schedules   Schedule[]
  
  @@unique([groupId, subjectId, number])
  @@map("subgroups")
}

model SubgroupStudent {
  id         String   @id @default(cuid())
  subgroupId String
  userId     String
  createdAt  DateTime @default(now())
  
  subgroup   Subgroup @relation(fields: [subgroupId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([subgroupId, userId])
  @@map("subgroup_students")
}

model Attendance {
  id         String   @id @default(cuid())
  scheduleId String
  userId     String
  status     String   // PRESENT, ABSENT, LATE, EXCUSED
  source     String?  // MANUAL, ZOOM_AUTO, VISUAL
  notes      String?
  markedBy   String   // userId admin/teacher
  markedAt   DateTime @default(now())
  
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  student    User     @relation("AttendanceStudent", fields: [userId], references: [id], onDelete: Cascade)
  marker     User     @relation("AttendanceMarker", fields: [markedBy], references: [id], onDelete: Cascade)
  
  @@unique([scheduleId, userId])
  @@map("attendance")
}

model Exam {
  id          String   @id @default(cuid())
  subjectId   String
  groupId     String
  type        String   // EXAM, CREDIT, DIFF_CREDIT
  format      String   // ORAL, WRITTEN, MIXED
  date        DateTime
  location    String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  results     ExamResult[]
  
  @@map("exams")
}

model ExamResult {
  id         String    @id @default(cuid())
  examId     String
  userId     String
  grade      String?   // 5, 4, 3, 2, ЗАЧЕТ, НЕ ЗАЧЕТ
  status     String    @default("NOT_TAKEN") // NOT_TAKEN, PASSED, FAILED
  notes      String?
  takenAt    DateTime?
  recordedBy String    // userId teacher
  createdAt  DateTime  @default(now())
  
  exam       Exam      @relation(fields: [examId], references: [id], onDelete: Cascade)
  student    User      @relation("ExamStudent", fields: [userId], references: [id], onDelete: Cascade)
  recorder   User      @relation("ExamRecorder", fields: [recordedBy], references: [id], onDelete: Cascade)
  
  @@unique([examId, userId])
  @@map("exam_results")
}

model MentorMeeting {
  id          String   @id @default(cuid())
  mentorId    String
  studentId   String
  scheduledAt DateTime
  duration    Int      // минуты
  status      String   @default("SCHEDULED") // SCHEDULED, COMPLETED, CANCELLED
  agenda      String?
  notes       String?  // Заметки после встречи (MDX)
  location    String?
  meetingType String?  // VKR, ACADEMIC, PERSONAL, OTHER
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  mentor      User     @relation("MentorMeetings", fields: [mentorId], references: [id], onDelete: Cascade)
  student     User     @relation("StudentMeetings", fields: [studentId], references: [id], onDelete: Cascade)
  
  @@map("mentor_meetings")
}

model ForumTopic {
  id        String   @id @default(cuid())
  subjectId String?
  groupId   String?
  authorId  String
  title     String
  content   String   @db.Text
  isPinned  Boolean  @default(false)
  isClosed  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  subject   Subject? @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  group     Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  posts     ForumPost[]
  
  @@map("forum_topics")
}

model ForumPost {
  id        String     @id @default(cuid())
  topicId   String
  authorId  String
  content   String     @db.Text
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  topic     ForumTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@map("forum_posts")
}
