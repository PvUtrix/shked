generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  password      String
  firstName     String?
  lastName      String?
  role          String      @default("student")
  groupId       String?
  canHelp       String?     // Чем могу быть полезен
  lookingFor    String?     // Что ищу
  mentorGroupIds Json?      // Группы для ментора (массив ID групп)
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  sessions      Session[]
  userGroups    UserGroup[]
  group         Group?      @relation(fields: [groupId], references: [id])
  telegramUser  TelegramUser?
  homeworkSubmissions HomeworkSubmission[]
  assignedSubjects Subject[] // Предметы для преподавателя
  homeworkComments HomeworkComment[] @relation("HomeworkCommentAuthor") // Комментарии к работам

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  semester    String?
  year        String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  schedules   Schedule[]
  userGroups  UserGroup[]
  users       User[]
  homework   Homework[]

  @@map("groups")
}

model Subject {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  instructor  String?
  lectorId    String?    // ID преподавателя
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  schedules   Schedule[]
  homework    Homework[]
  lector      User?      @relation(fields: [lectorId], references: [id])

  @@map("subjects")
}

model Schedule {
  id          String   @id @default(cuid())
  subjectId   String
  groupId     String?
  subgroupId  String?
  date        DateTime
  dayOfWeek   Int
  startTime   String
  endTime     String
  location    String?
  eventType   String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  group       Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@map("schedules")
}

model UserGroup {
  id                     String   @id @default(cuid())
  userId                 String
  groupId                String
  subgroupCommerce       Int?
  subgroupTutorial       Int?
  subgroupFinance        Int?
  subgroupSystemThinking Int?
  createdAt              DateTime @default(now())
  group                  Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("user_groups")
}

model TelegramUser {
  id            String   @id @default(cuid())
  userId        String   @unique
  telegramId    String   @unique
  chatId        String
  username      String?
  firstName     String?
  lastName      String?
  isActive      Boolean  @default(true)
  notifications Boolean  @default(true)
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("telegram_users")
}

model BotSettings {
  id                   String   @id @default(cuid())
  telegramBotToken     String?
  openaiApiKey         String?
  webhookUrl           String?
  isActive             Boolean  @default(false)
  notificationsEnabled Boolean  @default(true)
  reminderMinutes      Int      @default(30)
  dailySummaryTime     String   @default("07:00")
  updatedAt            DateTime @updatedAt
  createdAt            DateTime @default(now())
  
  @@map("bot_settings")
}

model Homework {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String?  // MDX контент задания
  taskUrl     String?  // Ссылка на задание
  deadline    DateTime
  materials   Json?    // Дополнительные материалы (массив объектов)
  subjectId   String
  groupId     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  group       Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  submissions HomeworkSubmission[]
  
  @@map("homework")
}

model HomeworkSubmission {
  id          String   @id @default(cuid())
  homeworkId  String
  userId      String
  content     String?  // MDX контент работы студента
  submissionUrl String? // Ссылка на выполненное задание
  status      String   @default("NOT_SUBMITTED") // NOT_SUBMITTED, SUBMITTED, REVIEWED
  grade       Int?     // Оценка (1-5 или 1-100)
  comment     String?  // Комментарий преподавателя (MDX)
  feedback    String?  // Развернутая обратная связь (MDX)
  submittedAt DateTime?
  reviewedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  homework    Homework @relation(fields: [homeworkId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    HomeworkComment[] // Inline комментарии к работе
  
  @@unique([homeworkId, userId])
  @@map("homework_submissions")
}

model HomeworkComment {
  id           String   @id @default(cuid())
  submissionId String   // ID работы студента
  authorId     String   // ID автора комментария (обычно лектор)
  content      String   // Текст комментария
  startOffset  Int      // Начальная позиция выделенного текста
  endOffset    Int      // Конечная позиция выделенного текста
  selectedText String   @db.Text // Выделенный текст для контекста
  resolved     Boolean  @default(false) // Помечен ли как решенный
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  submission   HomeworkSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  author       User              @relation("HomeworkCommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  
  @@map("homework_comments")
}
