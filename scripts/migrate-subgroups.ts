// –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–¥–≥—Ä—É–ø–ø: –∏–∑ UserGroup –≤ Subgroup/SubgroupStudent
// –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-10-30
// –¢–æ–ø–∏–∫: –ú–∏–≥—Ä–∞—Ü–∏—è –ö–¢–ü —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª–µ–π –ø–æ–¥–≥—Ä—É–ø–ø –Ω–∞ –Ω–æ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
const subgroupMappings = [
  { field: 'subgroupCommerce', subjectName: '–ö–æ–º–º–µ—Ä—Ü–∏—è' },
  { field: 'subgroupTutorial', subjectName: '–¢—å—é—Ç–æ—Ä–∏–∞–ª' },
  { field: 'subgroupFinance', subjectName: '–§–∏–Ω–∞–Ω—Å—ã' },
  { field: 'subgroupSystemThinking', subjectName: '–°–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ' }
]

async function main() {
  console.log('üîÑ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–¥–≥—Ä—É–ø–ø...')
  
  try {
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã
    const groups = await prisma.group.findMany({
      include: {
        userGroups: {
          include: {
            user: true
          }
        }
      }
    })
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: ${groups.length}`)
    
    let totalSubgroups = 0
    let totalStudents = 0
    
    for (const group of groups) {
      console.log(`\nüè´ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã: ${group.name}`)
      
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
      for (const mapping of subgroupMappings) {
        // –ù–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç
        const subject = await prisma.subject.findFirst({
          where: { name: { contains: mapping.subjectName } }
        })
        
        if (!subject) {
          console.log(`  ‚ö†Ô∏è  –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${mapping.subjectName}`)
          continue
        }
        
        // –ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–¥–≥—Ä—É–ø–ø –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        const subgroupNumbers = new Set<number>()
        for (const userGroup of group.userGroups) {
          const subgroupNum = (userGroup as any)[mapping.field]
          if (subgroupNum) {
            subgroupNumbers.add(subgroupNum)
          }
        }
        
        // –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—ã
        for (const num of Array.from(subgroupNumbers)) {
          // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–¥–≥—Ä—É–ø–ø–∞
          const existingSubgroup = await prisma.subgroup.findUnique({
            where: {
              groupId_subjectId_number: {
                groupId: group.id,
                subjectId: subject.id,
                number: num
              }
            }
          })
          
          if (existingSubgroup) {
            console.log(`  ‚ÑπÔ∏è  –ü–æ–¥–≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${mapping.subjectName} - ${num}`)
            continue
          }
          
          // –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—É
          const subgroup = await prisma.subgroup.create({
            data: {
              groupId: group.id,
              subjectId: subject.id,
              name: `–ü–æ–¥–≥—Ä—É–ø–ø–∞ ${num} (${mapping.subjectName})`,
              number: num
            }
          })
          
          totalSubgroups++
          console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–≥—Ä—É–ø–ø–∞: ${subgroup.name}`)
          
          // –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –ø–æ–¥–≥—Ä—É–ø–ø—É
          for (const userGroup of group.userGroups) {
            const studentSubgroupNum = (userGroup as any)[mapping.field]
            if (studentSubgroupNum === num) {
              // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Å—Ç—É–¥–µ–Ω—Ç
              const existingMembership = await prisma.subgroupStudent.findUnique({
                where: {
                  subgroupId_userId: {
                    subgroupId: subgroup.id,
                    userId: userGroup.userId
                  }
                }
              })
              
              if (!existingMembership) {
                await prisma.subgroupStudent.create({
                  data: {
                    subgroupId: subgroup.id,
                    userId: userGroup.userId
                  }
                })
                totalStudents++
              }
            }
          }
        }
      }
    }
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:')
    console.log(`  - –°–æ–∑–¥–∞–Ω–æ –ø–æ–¥–≥—Ä—É–ø–ø: ${totalSubgroups}`)
    console.log(`  - –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –ø–æ–¥–≥—Ä—É–ø–ø—ã: ${totalStudents}`)
    
    console.log('\n‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–¥–≥—Ä—É–ø–ø –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
    console.log('‚ÑπÔ∏è  –°—Ç–∞—Ä—ã–µ –ø–æ–ª—è –≤ UserGroup –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–¥–≥—Ä—É–ø–ø:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

main()
  .catch((error) => {
    console.error(error)
    process.exit(1)
  })


