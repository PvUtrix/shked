#!/bin/bash
# 2025-10-31 - –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Pull Request
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/release-pr.sh [patch|minor|major]

set -e

# –ó–∞–≥—Ä—É–∂–∞–µ–º nvm –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

RELEASE_TYPE="${1:-patch}"
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

echo "üöÄ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–ª–∏–∑–∞..."
echo "üìå –¢–∏–ø —Ä–µ–ª–∏–∑–∞: $RELEASE_TYPE"
echo "üìå –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: $CURRENT_BRANCH"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ main
if [ "$CURRENT_BRANCH" != "main" ]; then
  echo "‚ùå –û—à–∏–±–∫–∞: –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ –≤–µ—Ç–∫–µ main"
  exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è
if [ -n "$(git status --porcelain)" ]; then
  echo "‚ùå –û—à–∏–±–∫–∞: –µ—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
  git status --short
  exit 1
fi

# –û–±–Ω–æ–≤–ª—è–µ–º main
echo "üì• –û–±–Ω–æ–≤–ª—è—é –≤–µ—Ç–∫—É main..."
git pull origin main

# –ó–∞–ø—É—Å–∫–∞–µ–º release-it (—Å–æ–∑–¥–∞—ë—Ç –∫–æ–º–º–∏—Ç –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ –ø—É—à–∏—Ç)
echo "üìù –°–æ–∑–¥–∞—é changelog –∏ –æ–±–Ω–æ–≤–ª—è—é –≤–µ—Ä—Å–∏—é..."
RELEASE_TYPE="$RELEASE_TYPE" npm run release:$RELEASE_TYPE -- --ci

# –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –∏–∑ package.json
NEW_VERSION=$(node -p "require('./package.json').version")
BRANCH_NAME="release/v$NEW_VERSION"

echo "‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ: $NEW_VERSION"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–º–∏—Ç —Ä–µ–ª–∏–∑–∞
if [ -z "$(git log origin/main..HEAD)" ]; then
  echo "‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–º–∏—Ç —Ä–µ–ª–∏–∑–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω"
  exit 1
fi

# –°–æ–∑–¥–∞—ë–º –≤–µ—Ç–∫—É –¥–ª—è —Ä–µ–ª–∏–∑–∞
echo "üåø –°–æ–∑–¥–∞—é –≤–µ—Ç–∫—É —Ä–µ–ª–∏–∑–∞: $BRANCH_NAME"
git checkout -b "$BRANCH_NAME"

# –ü—É—à–∏–º –≤–µ—Ç–∫—É –Ω–∞ GitHub
echo "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–µ—Ç–∫—É –Ω–∞ GitHub..."
git push -u origin "$BRANCH_NAME"

# –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ main –∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
echo "‚Ü©Ô∏è  –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –Ω–∞ main..."
git checkout main
git reset --hard origin/main

# –°–æ–∑–¥–∞—ë–º —Ç–µ–≥ –ª–æ–∫–∞–ª—å–Ω–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
echo "üè∑Ô∏è  –°–æ–∑–¥–∞—é —Ç–µ–≥ v$NEW_VERSION..."
git tag "v$NEW_VERSION" "$BRANCH_NAME"
git push origin "v$NEW_VERSION"

# –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –∏–∑ CHANGELOG.md
echo "üìÑ –ò–∑–≤–ª–µ–∫–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ CHANGELOG..."
CHANGELOG_CONTENT=$(git show "$BRANCH_NAME:CHANGELOG.md" | sed -n "/^## .*$NEW_VERSION/,/^## /p" | sed '1d;$d')

# –°–æ–∑–¥–∞—ë–º PR –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å GitHub CLI
echo "üîÑ –°–æ–∑–¥–∞—é Pull Request..."
if command -v gh &> /dev/null; then
  PR_BODY="# Release v$NEW_VERSION

## –ò–∑–º–µ–Ω–µ–Ω–∏—è

$CHANGELOG_CONTENT

---

–ü–æ—Å–ª–µ –º–µ—Ä–¥–∂–∞ —ç—Ç–æ–≥–æ PR –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Ä–µ–ª–∏–∑ [v$NEW_VERSION](https://github.com/PvUtrix/shked/releases/new?tag=v$NEW_VERSION)"

  gh pr create \
    --base main \
    --head "$BRANCH_NAME" \
    --title "chore: release v$NEW_VERSION" \
    --body "$PR_BODY" \
    --reviewer PvUtrix 2>/dev/null || echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PR –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
  
  PR_URL=$(gh pr view "$BRANCH_NAME" --json url -q .url 2>/dev/null)
  
  if [ -n "$PR_URL" ]; then
    echo ""
    echo "‚úÖ –ì–æ—Ç–æ–≤–æ! Pull Request —Å–æ–∑–¥–∞–Ω:"
    echo "   $PR_URL"
  else
    echo ""
    echo "‚úÖ –ì–æ—Ç–æ–≤–æ!"
    echo ""
    echo "üìù –°–æ–∑–¥–∞–π—Ç–µ Pull Request –≤—Ä—É—á–Ω—É—é:"
    echo "   https://github.com/PvUtrix/shked/compare/$BRANCH_NAME?expand=1"
  fi
else
  echo ""
  echo "‚úÖ –ì–æ—Ç–æ–≤–æ!"
  echo ""
  echo "üìù –°–æ–∑–¥–∞–π—Ç–µ Pull Request:"
  echo "   https://github.com/PvUtrix/shked/compare/$BRANCH_NAME?expand=1"
fi

echo ""
echo "–ü–æ—Å–ª–µ –º–µ—Ä–¥–∂–∞ PR –≤ main, —Å–æ–∑–¥–∞–π—Ç–µ GitHub Release:"
echo "   https://github.com/PvUtrix/shked/releases/new?tag=v$NEW_VERSION"
echo ""

