
import { PrismaClient } from '@prisma/client'
import bcryptjs from 'bcryptjs'
import fs from 'fs'
import path from 'path'

const prisma = new PrismaClient()

interface ExcelAnalysis {
  sheets: string[]
  data: {
    [key: string]: {
      shape: number[]
      columns: string[]
      sample_data: any[]
    }
  }
}

async function main() {
  try {
    console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
    
    // –ß–∏—Ç–∞–µ–º –∞–Ω–∞–ª–∏–∑ Excel —Ñ–∞–π–ª–∞
    const analysisPath = path.join(__dirname, '..', 'data', 'excel_analysis.json')
    const excelAnalysis: ExcelAnalysis = JSON.parse(fs.readFileSync(analysisPath, 'utf-8'))
    
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
    
    // –ê–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const adminPassword = await bcryptjs.hash('admin123', 12)
    const admin = await prisma.user.upsert({
      where: { email: 'admin@shked.com' },
      update: {},
      create: {
        email: 'admin@shked.com',
        password: adminPassword,
        firstName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        lastName: '–°–∏—Å—Ç–µ–º—ã',
        name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º—ã',
        role: 'admin',
      },
    })

    // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
    const testPassword = await bcryptjs.hash('johndoe123', 12)
    const testUser = await prisma.user.upsert({
      where: { email: 'john@doe.com' },
      update: {},
      create: {
        email: 'john@doe.com',
        password: testPassword,
        firstName: 'John',
        lastName: 'Doe',
        name: 'John Doe',
        role: 'admin',
      },
    })

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (—Å–æ–∑–¥–∞–µ–º —Ä–∞–Ω—å—à–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞)
    console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø...')
    const techPredGroup = await prisma.group.upsert({
      where: { name: '–¢–µ—Ö–ü—Ä–µ–¥ –ú–§–¢–ò 2025-27' },
      update: {},
      create: {
        name: '–¢–µ—Ö–ü—Ä–µ–¥ –ú–§–¢–ò 2025-27',
        description: '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ú–§–¢–ò 2025-27',
        semester: '1 —Å–µ–º–µ—Å—Ç—Ä',
        year: '2025-27',
      },
    })

    // –î–µ–º–æ —Å—Ç—É–¥–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –≥—Ä—É–ø–ø—É)
    const demoStudentPassword = await bcryptjs.hash('student123', 12)
    const demoStudent = await prisma.user.upsert({
      where: { email: 'student123@demo.com' },
      update: {
        groupId: techPredGroup.id, // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      },
      create: {
        email: 'student123@demo.com',
        password: demoStudentPassword,
        firstName: '–î–µ–º–æ',
        lastName: '–°—Ç—É–¥–µ–Ω—Ç',
        name: '–î–µ–º–æ –°—Ç—É–¥–µ–Ω—Ç',
        role: 'student',
        groupId: techPredGroup.id, // –ù–∞–∑–Ω–∞—á–∞–µ–º –≤ –≥—Ä—É–ø–ø—É
      },
    })

    // –î–µ–º–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å (—Å–æ–∑–¥–∞–µ–º teacher@demo.com —Å —Ä–æ–ª—å—é teacher)
    const demoTeacherPassword = await bcryptjs.hash('teacher123', 12)
    const demoTeacher = await prisma.user.upsert({
      where: { email: 'teacher@demo.com' },
      update: {},
      create: {
        email: 'teacher@demo.com',
        password: demoTeacherPassword,
        firstName: '–î–µ–º–æ',
        lastName: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
        name: '–î–µ–º–æ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
        role: 'teacher',
      },
    })

    // –î–µ–º–æ –º–µ–Ω—Ç–æ—Ä
    const demoMentorPassword = await bcryptjs.hash('mentor123', 12)
    const demoMentor = await prisma.user.upsert({
      where: { email: 'mentor@demo.com' },
      update: {},
      create: {
        email: 'mentor@demo.com',
        password: demoMentorPassword,
        firstName: '–î–µ–º–æ',
        lastName: '–ú–µ–Ω—Ç–æ—Ä',
        name: '–î–µ–º–æ –ú–µ–Ω—Ç–æ—Ä',
        role: 'mentor',
      },
    })

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ Excel –¥–∞–Ω–Ω—ã—Ö
    console.log('üìö –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...')
    const subjects = [
      {
        name: '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–Ω—á—É—Ä–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è (–¢—å—é—Ç–æ—Ä–∏–∞–ª)',
        instructor: '–ß–∏–∫–∏–Ω –í.–ù., –ë–∞—Ö—á–∏–µ–≤ –ê.–í.',
        description: '–¢—å—é—Ç–æ—Ä–∏–∞–ª –ø–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤–µ–Ω—á—É—Ä–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è'
      },
      {
        name: '–ù–∞—É—á–Ω—ã–π —Å–µ–º–∏–Ω–∞—Ä',
        instructor: '–ë—É—Ä–µ–Ω–∏–Ω –ê.–í.',
        description: '–ù–∞—É—á–Ω—ã–π —Å–µ–º–∏–Ω–∞—Ä —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –º–∏–∫—Ä–æ-–≥—Ä—É–ø–ø—ã'
      },
      {
        name: '–°–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ',
        instructor: '–ë—É—Ö–∞—Ä–∏–Ω –ú.–ê., –ë–æ–¥—Ä–æ–≤ –í.–ö.',
        description: '–†–∞–∑–≤–∏—Ç–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è'
      },
      {
        name: '–ö–æ–º–º–µ—Ä—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è R&D',
        instructor: '–ê–Ω—Ç–æ–Ω–µ—Ü –í.–ê., –ë—É—Ä–µ–Ω–∏–Ω –ê.–ì.',
        description: '–ö–æ–º–º–µ—Ä—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫'
      },
      {
        name: '–û—Å–Ω–æ–≤—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è',
        instructor: '–ß–µ—Ä–Ω–æ–≤–∞ –ú.–ê.',
        description: '–û—Å–Ω–æ–≤—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è'
      },
      {
        name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞',
        instructor: '–ù–∏–∫–æ–ª–∞–µ–≤ –ê.–í.',
        description: '–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞'
      },
      {
        name: '–û–±—â–µ–∏–Ω—Å—Ç–∏—Ç—É—Ç—Å–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
        instructor: '–ú–§–¢–ò',
        description: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏ –æ–±—â–µ–∏–Ω—Å—Ç–∏—Ç—É—Ç—Å–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
      }
    ]

    const createdSubjects = []
    for (const subject of subjects) {
      const createdSubject = await prisma.subject.upsert({
        where: { name: subject.name },
        update: {},
        create: subject,
      })
      createdSubjects.push(createdSubject)
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –¥–µ–º–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
    const teacherSubjects = createdSubjects.slice(0, 3) // –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–µ–¥–º–µ—Ç–∞
    for (const subject of teacherSubjects) {
      await prisma.subject.update({
        where: { id: subject.id },
        data: { lectorId: demoTeacher.id }
      })
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –¥–µ–º–æ –º–µ–Ω—Ç–æ—Ä–∞ –∫ –≥—Ä—É–ø–ø–µ
    await prisma.user.update({
      where: { id: demoMentor.id },
      data: { mentorGroupIds: [techPredGroup.id] }
    })

    // 4. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    console.log('üéì –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...')
    const studentsData = excelAnalysis.data['1 —Å–µ–º–µ—Å—Ç—Ä. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥'].sample_data
    
    const students = []
    for (const studentData of studentsData) {
      if (studentData?.–°—Ç—É–¥–µ–Ω—Ç) {
        const names = studentData.–°—Ç—É–¥–µ–Ω—Ç.split(' ')
        const firstName = names[1] || '–°—Ç—É–¥–µ–Ω—Ç'
        const lastName = names[0] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
        const email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}@student.mipt.ru`.replace(/[^a-z0-9@.]/g, '')
        
        const studentPassword = await bcryptjs.hash('student123', 12)
        const student = await prisma.user.upsert({
          where: { email },
          update: {},
          create: {
            email,
            password: studentPassword,
            firstName,
            lastName,
            name: studentData.–°—Ç—É–¥–µ–Ω—Ç,
            role: 'student',
            groupId: techPredGroup.id,
          },
        })
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ –ø–æ–¥–≥—Ä—É–ø–ø–∞–º
        await prisma.userGroup.upsert({
          where: { 
            userId_groupId: {
              userId: student.id,
              groupId: techPredGroup.id
            }
          },
          update: {},
          create: {
            userId: student.id,
            groupId: techPredGroup.id,
            subgroupCommerce: studentData.–ö–æ–º–º–µ—Ä—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è,
            subgroupTutorial: studentData.–¢—å—é—Ç–æ—Ä–∏–∞–ª,
            subgroupFinance: studentData['–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ'],
            subgroupSystemThinking: studentData['–°–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ'],
          },
        })
        
        students.push(student)
      }
    }

    // 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ Excel –¥–∞–Ω–Ω—ã—Ö
    console.log('üìÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...')
    const scheduleData = excelAnalysis.data['1 —Å–µ–º–µ—Å—Ç—Ä. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'].sample_data
    
    for (let i = 7; i < scheduleData.length; i++) { // –ù–∞—á–∏–Ω–∞–µ–º —Å 7-–π –∑–∞–ø–∏—Å–∏, –≥–¥–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const row = scheduleData[i]
      if (row?.['–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–Ω—á—É—Ä–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è (–¢—å—é—Ç–æ—Ä–∏–∞–ª)/ –ß–∏–∫–∏–Ω –í.–ù., –ë–∞—Ö—á–∏–µ–≤ –ê.–í.'] && 
          typeof row['–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–Ω—á—É—Ä–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è (–¢—å—é—Ç–æ—Ä–∏–∞–ª)/ –ß–∏–∫–∏–Ω –í.–ù., –ë–∞—Ö—á–∏–µ–≤ –ê.–í.'] === 'string' &&
          row['–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–Ω—á—É—Ä–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è (–¢—å—é—Ç–æ—Ä–∏–∞–ª)/ –ß–∏–∫–∏–Ω –í.–ù., –ë–∞—Ö—á–∏–µ–≤ –ê.–í.'].includes('2025')) {
        
        const dateStr = row['–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–Ω—á—É—Ä–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è (–¢—å—é—Ç–æ—Ä–∏–∞–ª)/ –ß–∏–∫–∏–Ω –í.–ù., –ë–∞—Ö—á–∏–µ–≤ –ê.–í.']
        const dayOfWeek = row['Unnamed: 1']
        const time = row['Unnamed: 2']
        const eventName = row['–ü–æ–¥–≥—Ä—É–ø–ø–∞ 1']
        const location = row['Unnamed: 19']
        
        if (dateStr && eventName && time) {
          try {
            const eventDate = new Date(dateStr)
            if (!isNaN(eventDate.getTime())) {
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–æ–±—ã—Ç–∏—è
              let subject = createdSubjects.find(s => s.name.includes('–û–±—â–µ–∏–Ω—Å—Ç–∏—Ç—É—Ç—Å–∫–∏–µ'))
              if (eventName.includes('—Å–µ–º–∏–Ω–∞—Ä')) {
                subject = createdSubjects.find(s => s.name.includes('–ù–∞—É—á–Ω—ã–π —Å–µ–º–∏–Ω–∞—Ä'))
              } else if (eventName.includes('Fest Tech')) {
                subject = createdSubjects.find(s => s.name.includes('–û–±—â–µ–∏–Ω—Å—Ç–∏—Ç—É—Ç—Å–∫–∏–µ'))
              }
              
              if (subject) {
                const [startTime, endTime] = time.includes('-') ? time.split('-') : [time, time]
                
                await prisma.schedule.create({
                  data: {
                    subjectId: subject.id,
                    groupId: techPredGroup.id,
                    date: eventDate,
                    dayOfWeek: typeof dayOfWeek === 'number' ? dayOfWeek : eventDate.getDay(),
                    startTime: startTime?.trim() || '09:00',
                    endTime: endTime?.trim() || '18:00',
                    location: location || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    eventType: 'seminar',
                    description: eventName,
                  },
                })
              }
            }
          } catch (error) {
            console.log(`–ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å: ${error}`)
          }
        }
      }
    }

    // 6. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
    console.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π...')
    const additionalSchedules = [
      {
        subject: createdSubjects.find(s => s.name.includes('–°–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ')),
        date: new Date('2025-09-15'),
        startTime: '10:00',
        endTime: '12:00',
        location: '–ê—É–¥–∏—Ç–æ—Ä–∏—è 301',
        description: '–õ–µ–∫—Ü–∏—è –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –º—ã—à–ª–µ–Ω–∏—é'
      },
      {
        subject: createdSubjects.find(s => s.name.includes('–ö–æ–º–º–µ—Ä—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è')),
        date: new Date('2025-09-16'),
        startTime: '14:00',
        endTime: '16:00',
        location: '–ê—É–¥–∏—Ç–æ—Ä–∏—è 205',
        description: '–ü—Ä–∞–∫—Ç–∏–∫—É–º –ø–æ –∫–æ–º–º–µ—Ä—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏'
      },
      {
        subject: createdSubjects.find(s => s.name.includes('—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è')),
        date: new Date('2025-09-17'),
        startTime: '11:00',
        endTime: '13:00',
        location: '–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å',
        description: '–ü—Ä–∞–∫—Ç–∏–∫—É–º –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—é'
      }
    ]

    for (const schedule of additionalSchedules) {
      if (schedule.subject) {
        await prisma.schedule.create({
          data: {
            subjectId: schedule.subject.id,
            groupId: techPredGroup.id,
            date: schedule.date,
            dayOfWeek: schedule.date.getDay(),
            startTime: schedule.startTime,
            endTime: schedule.endTime,
            location: schedule.location,
            eventType: 'lecture',
            description: schedule.description,
          },
        })
      }
    }

    // 7. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π...')
    const homeworkData = [
      {
        title: '–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞',
        description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ä—Ç–∞–ø-–ø—Ä–æ–µ–∫—Ç–∞. –í–∫–ª—é—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã.',
        taskUrl: 'https://docs.google.com/document/d/example1',
        deadline: new Date('2025-10-20T23:59:00'),
        materials: [
          { name: '–®–∞–±–ª–æ–Ω –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞', url: 'https://example.com/template', type: 'document' },
          { name: '–ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤', url: 'https://example.com/examples', type: 'link' }
        ],
        subject: createdSubjects.find(s => s.name.includes('–ö–æ–º–º–µ—Ä—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è'))
      },
      {
        title: '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞',
        description: '–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ 3 –≥–æ–¥–∞ –≤–ø–µ—Ä–µ–¥. –í–∫–ª—é—á–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–æ—Ö–æ–¥–æ–≤, —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏.',
        taskUrl: 'https://docs.google.com/spreadsheets/d/example2',
        deadline: new Date('2025-10-25T23:59:00'),
        materials: [
          { name: '–®–∞–±–ª–æ–Ω —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏', url: 'https://example.com/financial-template', type: 'document' },
          { name: '–í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', url: 'https://example.com/video', type: 'video' }
        ],
        subject: createdSubjects.find(s => s.name.includes('—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è'))
      },
      {
        title: '–°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø—Ä–æ–µ–∫—Ç–∞',
        description: '–°–æ–∑–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞—é—â—É—é –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ.',
        taskUrl: 'https://miro.com/board/example3',
        deadline: new Date('2025-10-18T23:59:00'),
        materials: [
          { name: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º', url: 'https://example.com/tools', type: 'link' }
        ],
        subject: createdSubjects.find(s => s.name.includes('–°–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ'))
      }
    ]

    const createdHomework = []
    for (const hw of homeworkData) {
      if (hw.subject) {
        const homework = await prisma.homework.create({
          data: {
            title: hw.title,
            description: hw.description,
            taskUrl: hw.taskUrl,
            deadline: hw.deadline,
            materials: hw.materials,
            subjectId: hw.subject.id,
            groupId: techPredGroup.id
          }
        })
        createdHomework.push(homework)
      }
    }

    // 8. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–¥–∞—á –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
    console.log('üì§ –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–∞—á –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π...')
    const sampleStudents = students.slice(0, 5) // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö 5 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    
    for (const student of sampleStudents) {
      for (const homework of createdHomework) {
        // –°–æ–∑–¥–∞–µ–º —Å–¥–∞—á—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–¥–∞–Ω—ã, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ—Ç)
        const shouldSubmit = Math.random() > 0.3 // 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–¥–∞—á–∏
        
        if (shouldSubmit) {
          const status = Math.random() > 0.5 ? 'SUBMITTED' : 'REVIEWED'
          const grade = status === 'REVIEWED' ? Math.floor(Math.random() * 2) + 4 : null // 4 –∏–ª–∏ 5
          const comment = status === 'REVIEWED' ? 
            (grade === 5 ? '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –û—á–µ–Ω—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑.' : '–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, –µ—Å—Ç—å —á—Ç–æ —É–ª—É—á—à–∏—Ç—å.') : 
            null

          await prisma.homeworkSubmission.create({
            data: {
              homeworkId: homework.id,
              userId: student.id,
              submissionUrl: Math.random() > 0.5 
                ? `https://github.com/student-${student.id}/homework-${homework.id}` 
                : null,
              status: status,
              grade: grade,
              comment: comment,
              submittedAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000), // –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
              reviewedAt: status === 'REVIEWED' ? new Date() : null
            }
          })
        }
      }
    }

    console.log('‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ:
    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${students.length + 4} (–≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–∞, —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–µ–º–æ —Å—Ç—É–¥–µ–Ω—Ç–∞, –¥–µ–º–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –¥–µ–º–æ –º–µ–Ω—Ç–æ—Ä–∞)
    - –ì—Ä—É–ø–ø: 1
    - –ü—Ä–µ–¥–º–µ—Ç–æ–≤: ${createdSubjects.length}
    - –†–∞—Å–ø–∏—Å–∞–Ω–∏–π: –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏–∑ Excel —Ñ–∞–π–ª–∞ + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
    - –î–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π: ${createdHomework.length}
    - –°–¥–∞—á: —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    - –î–µ–º–æ –∞–∫–∫–∞—É–Ω—Ç—ã:
      * admin@shked.com / admin123 (–∞–¥–º–∏–Ω)
      * john@doe.com / johndoe123 (–∞–¥–º–∏–Ω)
      * student123@demo.com / student123 (—Å—Ç—É–¥–µ–Ω—Ç)
      * teacher@demo.com / teacher123 (–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)
      * mentor@demo.com / mentor123 (–º–µ–Ω—Ç–æ—Ä)`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error)
  }
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
