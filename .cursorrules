# Правила для проекта SmartSchedule (Шкед)

## Контекст проекта
SmartSchedule (Шкед) - современная веб-платформа для управления расписанием занятий в университете МФТИ. 
Технологический стек: Next.js 14, React 18, TypeScript, Prisma, PostgreSQL, NextAuth.js, Tailwind CSS, Radix UI.

## Языковые требования

### Избегание англицизмов
- ВСЕГДА используйте русские термины вместо английских
- Комментарии в коде должны быть на русском языке
- Комментарии, UI текст, сообщения об ошибках - на русском языке
- Документация и README должны быть на русском языке
- Сообщения об ошибках и уведомления должны быть на русском языке

## Архитектура проекта

### Структура папок:
- `app/` - App Router Next.js 14 (страницы и API routes)
- `components/` - React компоненты (UI компоненты в `ui/`, специфичные в `admin/`, `student/`)
- `lib/` - утилиты, конфигурация, типы
- `prisma/` - схема базы данных
- `hooks/` - кастомные React хуки
- `types/` - TypeScript типы

### Роли пользователей:
- `admin` - администратор (доступ к `/admin/*`)
- `student` - студент (доступ к `/student/*`)

### Основные сущности:
- `User` - пользователь системы
- `Group` - учебная группа
- `Subject` - предмет/дисциплина
- `Schedule` - расписание занятий
- `TelegramUser` - интеграция с Telegram
- `BotSettings` - настройки бота

## Стиль кода

### Именование:
- **Переменные**: camelCase на английском - `userName`, `createdAt`, `startTime`
- **Компоненты**: PascalCase на английском - `LoginForm`, `StudentList`, `ScheduleCalendar`
- **Константы**: UPPER_SNAKE_CASE - `MAX_FILE_SIZE`
- **CSS классы**: kebab-case - `login-form`, `submit-button`
- **API routes**: kebab-case - `/api/telegram/webhook`, `/api/schedules`

### Комментарии:
- Все комментарии на русском языке
- Объясняйте "почему", а не "что"
- Используйте `//` для однострочных, `/* */` для многострочных

### TypeScript:
- Строгая типизация обязательна
- Используйте интерфейсы для типов данных
- Экспортируйте типы из `lib/types.ts`

## Специфика проекта

### Next.js 14 App Router:
- Используйте Server Components по умолчанию
- Client Components только при необходимости (useState, useEffect, события)
- API routes в `app/api/`

### Prisma ORM:
- Схема в `prisma/schema.prisma`
- Миграции через `prisma migrate`
- Типы генерируются автоматически

### Аутентификация:
- NextAuth.js с JWT стратегией
- Роли: `admin`, `student`
- Middleware для защиты роутов

### UI/UX:
- Radix UI компоненты в `components/ui/`
- Tailwind CSS для стилизации
- Адаптивный дизайн обязателен
- Темная/светлая тема через next-themes

### Telegram интеграция:
- Webhook для получения сообщений
- Cron задачи для уведомлений
- LLM интеграция для обработки запросов

## Исключения

### Можно оставить на английском:
- Названия библиотек (React, Next.js, TypeScript, Prisma)
- Стандартные API endpoints (`/api/auth/*`)
- Переменные окружения
- Поля базы данных (если это стандарт Prisma)
- CSS классы от Radix UI
- Названия файлов конфигурации

## Проверка качества

### Перед коммитом:
1. ✅ Все комментарии на русском языке
2. ✅ UI элементы на русском языке
3. ✅ Сообщения об ошибках на русском языке
4. ✅ Названия переменных на английском (стандарт)
5. ✅ TypeScript ошибки исправлены
6. ✅ ESLint ошибки исправлены
7. ✅ Компоненты правильно типизированы
8. ✅ API routes защищены middleware

### Тестирование:
- Проверяйте работу на разных ролях (admin/student)
- Тестируйте Telegram интеграцию
- Проверяйте адаптивность на мобильных устройствах
