import { processUserQuery } from './llm'
import { getSchedule, getNextClass } from './llm'
import { sendMessage } from './bot'
import { prisma } from '@/lib/db'
import crypto from 'crypto'

export interface CommandHandler {
  (userId: string, chatId: number, args?: string[]): Promise<string>
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
 */
export function generateLinkToken(): string {
  return crypto.randomBytes(32).toString('hex')
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function saveLinkToken(userId: string, token: string): Promise<void> {
  // –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 15 –º–∏–Ω—É—Ç
  const expiresAt = new Date(Date.now() + 15 * 60 * 1000)
  
  await prisma.verificationToken.upsert({
    where: {
      identifier_token: {
        identifier: `telegram_link_${userId}`,
        token: token
      }
    },
    update: {
      expires: expiresAt
    },
    create: {
      identifier: `telegram_link_${userId}`,
      token: token,
      expires: expiresAt
    }
  })
}

/**
 * –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É –ø—Ä–∏–≤—è–∑–∫–∏
 */
export async function findUserByLinkToken(token: string): Promise<string | null> {
  const verificationToken = await prisma.verificationToken.findFirst({
    where: {
      identifier: {
        startsWith: 'telegram_link_'
      },
      token: token,
      expires: {
        gt: new Date()
      }
    }
  })

  if (!verificationToken) {
    return null
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º userId –∏–∑ identifier
  const userId = verificationToken.identifier.replace('telegram_link_', '')
  return userId
}

/**
 * –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
export async function linkTelegramAccount(
  userId: string,
  telegramId: string,
  chatId: string,
  username?: string,
  firstName?: string,
  lastName?: string
): Promise<boolean> {
  try {
    await prisma.telegramUser.upsert({
      where: { userId },
      update: {
        telegramId,
        chatId,
        username,
        firstName,
        lastName,
        isActive: true,
        notifications: true
      },
      create: {
        userId,
        telegramId,
        chatId,
        username,
        firstName,
        lastName,
        isActive: true,
        notifications: true
      }
    })

    // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    await prisma.verificationToken.deleteMany({
      where: {
        identifier: `telegram_link_${userId}`,
        token: {
          not: undefined
        }
      }
    })

    return true
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞:', error)
    return false
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
 */
export async function getUserByTelegramId(telegramId: string) {
  return await prisma.telegramUser.findUnique({
    where: { telegramId },
    include: {
      user: {
        include: {
          group: true
        }
      }
    }
  })
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ /start
 */
export async function handleStart(userId: string, chatId: number): Promise<string> {
  const telegramUser = await getUserByTelegramId(userId)
  
  if (telegramUser) {
    return `–ü—Ä–∏–≤–µ—Ç, ${telegramUser.user.firstName}! üëã

–í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–∏—Å—Ç–µ–º–µ –®–ö–ï–î.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`
  }

  return `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –®–ö–ï–î! üéì

–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ —Å–∏—Å—Ç–µ–º–µ:
1. –í–æ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –®–ö–ï–î
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å
3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –ø—Ä–∏–≤—è–∑–∫–∏
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /link [—Ç–æ–∫–µ–Ω]

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.`
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ /link
 */
export async function handleLink(userId: string, chatId: number, args?: string[]): Promise<string> {
  if (!args || args.length === 0) {
    return `–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
/link [—Ç–æ–∫–µ–Ω]

–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –º–æ–∂–Ω–æ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –®–ö–ï–î –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ—Ñ–∏–ª—è.`
  }

  const token = args[0]
  const webUserId = await findUserByLinkToken(token)
  
  if (!webUserId) {
    return `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω –ø—Ä–∏–≤—è–∑–∫–∏.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –®–ö–ï–î.`
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
  const telegramUser = await getUserByTelegramId(userId)
  if (telegramUser) {
    return `‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–∏—Å—Ç–µ–º–µ –®–ö–ï–î.`
  }

  // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
  const success = await linkTelegramAccount(
    webUserId,
    userId,
    chatId.toString(),
    undefined, // username –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ webhook
    undefined, // firstName –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ webhook
    undefined  // lastName –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ webhook
  )

  if (success) {
    return `‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–∏—Å—Ç–µ–º–µ –®–ö–ï–î!
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`
  } else {
    return `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
  }
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ /schedule
 */
export async function handleSchedule(userId: string, chatId: number): Promise<string> {
  const telegramUser = await getUserByTelegramId(userId)
  
  if (!telegramUser) {
    return `‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–∏—Å—Ç–µ–º–µ –®–ö–ï–î.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.`
  }

  const schedules = await getSchedule(telegramUser.user.id)
  
  if (schedules.length === 0) {
    return `üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.`
  }

  let message = `üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n`
  
  schedules.forEach((schedule, index) => {
    message += `${index + 1}. *${schedule.subject.name}*\n`
    message += `   ‚è∞ ${schedule.startTime} - ${schedule.endTime}\n`
    if (schedule.location) {
      message += `   üìç ${schedule.location}\n`
    }
    if (schedule.subject.instructor) {
      message += `   üë®‚Äçüè´ ${schedule.subject.instructor}\n`
    }
    if (schedule.eventType) {
      message += `   üìö ${schedule.eventType}\n`
    }
    message += `\n`
  })

  return message
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ /tomorrow
 */
export async function handleTomorrow(userId: string, chatId: number): Promise<string> {
  const telegramUser = await getUserByTelegramId(userId)
  
  if (!telegramUser) {
    return `‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–∏—Å—Ç–µ–º–µ –®–ö–ï–î.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.`
  }

  const tomorrow = new Date()
  tomorrow.setDate(tomorrow.getDate() + 1)
  
  const schedules = await getSchedule(telegramUser.user.id, tomorrow)
  
  if (schedules.length === 0) {
    return `üìÖ –ù–∞ –∑–∞–≤—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.`
  }

  let message = `üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:*\n\n`
  
  schedules.forEach((schedule, index) => {
    message += `${index + 1}. *${schedule.subject.name}*\n`
    message += `   ‚è∞ ${schedule.startTime} - ${schedule.endTime}\n`
    if (schedule.location) {
      message += `   üìç ${schedule.location}\n`
    }
    if (schedule.subject.instructor) {
      message += `   üë®‚Äçüè´ ${schedule.subject.instructor}\n`
    }
    if (schedule.eventType) {
      message += `   üìö ${schedule.eventType}\n`
    }
    message += `\n`
  })

  return message
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ /week
 */
export async function handleWeek(userId: string, chatId: number): Promise<string> {
  const telegramUser = await getUserByTelegramId(userId)
  
  if (!telegramUser) {
    return `‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–∏—Å—Ç–µ–º–µ –®–ö–ï–î.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.`
  }

  const today = new Date()
  const weekStart = new Date(today)
  weekStart.setDate(today.getDate() - today.getDay() + 1) // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
  const weekEnd = new Date(weekStart)
  weekEnd.setDate(weekStart.getDate() + 6) // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

  const schedules = await prisma.schedule.findMany({
    where: {
      groupId: telegramUser.user.groupId,
      date: {
        gte: weekStart,
        lte: weekEnd
      }
    },
    include: {
      subject: true
    },
    orderBy: [
      { date: 'asc' },
      { startTime: 'asc' }
    ]
  })

  if (schedules.length === 0) {
    return `üìÖ –ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.`
  }

  let message = `üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n\n`
  
  const daysOfWeek = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
  const groupedSchedules = schedules.reduce((acc, schedule) => {
    const dayOfWeek = schedule.dayOfWeek
    if (!acc[dayOfWeek]) {
      acc[dayOfWeek] = []
    }
    acc[dayOfWeek].push(schedule)
    return acc
  }, {} as Record<number, any[]>)

  for (let day = 1; day <= 7; day++) {
    if (groupedSchedules[day] && groupedSchedules[day].length > 0) {
      message += `*${daysOfWeek[day - 1]}*\n`
      groupedSchedules[day].forEach((schedule, index) => {
        message += `${index + 1}. *${schedule.subject.name}*\n`
        message += `   ‚è∞ ${schedule.startTime} - ${schedule.endTime}\n`
        if (schedule.location) {
          message += `   üìç ${schedule.location}\n`
        }
        if (schedule.subject.instructor) {
          message += `   üë®‚Äçüè´ ${schedule.subject.instructor}\n`
        }
        message += `\n`
      })
    }
  }

  return message
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ /settings
 */
export async function handleSettings(userId: string, chatId: number): Promise<string> {
  const telegramUser = await getUserByTelegramId(userId)
  
  if (!telegramUser) {
    return `‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–∏—Å—Ç–µ–º–µ –®–ö–ï–î.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.`
  }

  return `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${telegramUser.notifications ? '–í–∫–ª—é—á–µ–Ω—ã' : '–û—Ç–∫–ª—é—á–µ–Ω—ã'}
üì± Telegram ID: ${telegramUser.telegramId}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${telegramUser.user.firstName} ${telegramUser.user.lastName}
üéì –ì—Ä—É–ø–ø–∞: ${telegramUser.user.group?.name || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ /homework
 */
export async function handleHomework(userId: string, chatId: number): Promise<string> {
  const telegramUser = await getUserByTelegramId(userId)
  
  if (!telegramUser) {
    return `‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–∏—Å—Ç–µ–º–µ –®–ö–ï–î.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.`
  }

  const homework = await prisma.homework.findMany({
    where: {
      groupId: telegramUser.user.groupId,
      isActive: true,
      deadline: {
        gte: new Date() // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
      }
    },
    include: {
      subject: true,
      submissions: {
        where: {
          userId: telegramUser.user.id
        }
      }
    },
    orderBy: {
      deadline: 'asc'
    }
  })

  if (homework.length === 0) {
    return `üìù *–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è*

–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.`
  }

  let message = `üìù *–í–∞—à–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:*\n\n`
  
  homework.forEach((hw, index) => {
    const submission = hw.submissions[0]
    const status = submission ? 
      (submission.status === 'REVIEWED' ? '‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ' : 
       submission.status === 'SUBMITTED' ? 'üì§ –°–¥–∞–Ω–æ' : '‚ùå –ù–µ —Å–¥–∞–Ω–æ') : 
      '‚ùå –ù–µ —Å–¥–∞–Ω–æ'
    
    const deadline = new Date(hw.deadline).toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
    
    message += `${index + 1}. *${hw.title}*\n`
    message += `   üìö ${hw.subject.name}\n`
    message += `   ‚è∞ –î–µ–¥–ª–∞–π–Ω: ${deadline}\n`
    message += `   üìä –°—Ç–∞—Ç—É—Å: ${status}\n`
    if (submission?.grade) {
      message += `   üéØ –û—Ü–µ–Ω–∫–∞: ${submission.grade}\n`
    }
    message += `\n`
  })

  return message
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ /homework_due
 */
export async function handleHomeworkDue(userId: string, chatId: number): Promise<string> {
  const telegramUser = await getUserByTelegramId(userId)
  
  if (!telegramUser) {
    return `‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–∏—Å—Ç–µ–º–µ –®–ö–ï–î.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.`
  }

  const now = new Date()
  const threeDaysFromNow = new Date(now.getTime() + 3 * 24 * 60 * 60 * 1000)

  const homework = await prisma.homework.findMany({
    where: {
      groupId: telegramUser.user.groupId,
      isActive: true,
      deadline: {
        gte: now,
        lte: threeDaysFromNow
      }
    },
    include: {
      subject: true,
      submissions: {
        where: {
          userId: telegramUser.user.id
        }
      }
    },
    orderBy: {
      deadline: 'asc'
    }
  })

  if (homework.length === 0) {
    return `üìù *–ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã*

–í –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤ –ø–æ –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏—è–º.`
  }

  let message = `üìù *–ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã (3 –¥–Ω—è):*\n\n`
  
  homework.forEach((hw, index) => {
    const submission = hw.submissions[0]
    const status = submission ? 
      (submission.status === 'REVIEWED' ? '‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ' : 
       submission.status === 'SUBMITTED' ? 'üì§ –°–¥–∞–Ω–æ' : '‚ùå –ù–µ —Å–¥–∞–Ω–æ') : 
      '‚ùå –ù–µ —Å–¥–∞–Ω–æ'
    
    const deadline = new Date(hw.deadline)
    const hoursLeft = Math.ceil((deadline.getTime() - now.getTime()) / (1000 * 60 * 60))
    
    message += `${index + 1}. *${hw.title}*\n`
    message += `   üìö ${hw.subject.name}\n`
    message += `   ‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: ${hoursLeft} —á–∞—Å–æ–≤\n`
    message += `   üìä –°—Ç–∞—Ç—É—Å: ${status}\n`
    if (submission?.grade) {
      message += `   üéØ –û—Ü–µ–Ω–∫–∞: ${submission.grade}\n`
    }
    message += `\n`
  })

  return message
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ /help
 */
export async function handleHelp(userId: string, chatId: number): Promise<string> {
  return `üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
/link [—Ç–æ–∫–µ–Ω] - –ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ —Å–∏—Å—Ç–µ–º–µ
/schedule - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/tomorrow - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
/week - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
/homework - –ú–æ–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
/homework_due - –ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí¨ *–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫:*
–ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –æ–±—ã—á–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:
‚Ä¢ "–ö–æ–≥–¥–∞ –º–æ—è —Å–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞?"
‚Ä¢ "–ß—Ç–æ —É –º–µ–Ω—è –∑–∞–≤—Ç—Ä–∞?"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"
‚Ä¢ "–ì–¥–µ –∑–∞–Ω—è—Ç–∏–µ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ?"
‚Ä¢ "–ö–∞–∫–∏–µ –¥–æ–º–∞—à–∫–∏ —É –º–µ–Ω—è –µ—Å—Ç—å?"
‚Ä¢ "–ö–æ–≥–¥–∞ —Å–¥–∞–≤–∞—Ç—å –î–ó –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ?"

ü§ñ –ë–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫–∏.`
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
 */
export async function handleNaturalLanguage(userId: string, chatId: number, text: string): Promise<string> {
  const telegramUser = await getUserByTelegramId(userId)
  
  if (!telegramUser) {
    return `‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–∏—Å—Ç–µ–º–µ –®–ö–ï–î.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.`
  }

  return await processUserQuery(telegramUser.user.id, text)
}

/**
 * –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
 */
export async function routeCommand(
  telegramId: string,
  chatId: number,
  command: string,
  args?: string[]
): Promise<string> {
  const userId = telegramId

  switch (command) {
    case '/start':
      return await handleStart(userId, chatId)
    
    case '/link':
      return await handleLink(userId, chatId, args)
    
    case '/schedule':
      return await handleSchedule(userId, chatId)
    
    case '/tomorrow':
      return await handleTomorrow(userId, chatId)
    
    case '/week':
      return await handleWeek(userId, chatId)
    
    case '/homework':
      return await handleHomework(userId, chatId)
    
    case '/homework_due':
      return await handleHomeworkDue(userId, chatId)
    
    case '/settings':
      return await handleSettings(userId, chatId)
    
    case '/help':
      return await handleHelp(userId, chatId)
    
    default:
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
      return await handleNaturalLanguage(userId, chatId, command)
  }
}
