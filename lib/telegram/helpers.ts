import { ScheduleData } from './llm'

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è Telegram
 */
export function formatSchedule(schedules: ScheduleData[]): string {
  if (schedules.length === 0) {
    return 'üìÖ –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.'
  }

  let message = 'üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:*\n\n'
  
  schedules.forEach((schedule, index) => {
    message += `${index + 1}. *${schedule.subject.name}*\n`
    message += `   ‚è∞ ${schedule.startTime} - ${schedule.endTime}\n`
    if (schedule.location) {
      message += `   üìç ${schedule.location}\n`
    }
    if (schedule.subject.instructor) {
      message += `   üë®‚Äçüè´ ${schedule.subject.instructor}\n`
    }
    if (schedule.eventType) {
      message += `   üìö ${schedule.eventType}\n`
    }
    if (schedule.description) {
      message += `   üìù ${schedule.description}\n`
    }
    message += `\n`
  })

  return message
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ
 */
export function formatNextClass(schedule: ScheduleData | null): string {
  if (!schedule) {
    return 'üìÖ –°–ª–µ–¥—É—é—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.'
  }

  let message = `‚è∞ *–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ:*\n\n`
  message += `üìö *${schedule.subject.name}*\n`
  message += `üìÖ ${schedule.date.toLocaleDateString('ru-RU')}\n`
  message += `‚è∞ ${schedule.startTime} - ${schedule.endTime}\n`
  if (schedule.location) {
    message += `üìç ${schedule.location}\n`
  }
  if (schedule.subject.instructor) {
    message += `üë®‚Äçüè´ ${schedule.subject.instructor}\n`
  }
  if (schedule.eventType) {
    message += `üìö ${schedule.eventType}\n`
  }
  return message
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
 */
export function parseRussianDate(dateStr: string): Date | null {
  const today = new Date()
  const tomorrow = new Date(today)
  tomorrow.setDate(today.getDate() + 1)

  const lowerStr = dateStr.toLowerCase().trim()

  if (lowerStr.includes('—Å–µ–≥–æ–¥–Ω—è') || lowerStr.includes('today')) {
    return today
  }

  if (lowerStr.includes('–∑–∞–≤—Ç—Ä–∞') || lowerStr.includes('tomorrow')) {
    return tomorrow
  }

  if (lowerStr.includes('–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫') || lowerStr.includes('monday')) {
    return getNextWeekday(today, 1)
  }

  if (lowerStr.includes('–≤—Ç–æ—Ä–Ω–∏–∫') || lowerStr.includes('tuesday')) {
    return getNextWeekday(today, 2)
  }

  if (lowerStr.includes('—Å—Ä–µ–¥–∞') || lowerStr.includes('wednesday')) {
    return getNextWeekday(today, 3)
  }

  if (lowerStr.includes('—á–µ—Ç–≤–µ—Ä–≥') || lowerStr.includes('thursday')) {
    return getNextWeekday(today, 4)
  }

  if (lowerStr.includes('–ø—è—Ç–Ω–∏—Ü–∞') || lowerStr.includes('friday')) {
    return getNextWeekday(today, 5)
  }

  if (lowerStr.includes('—Å—É–±–±–æ—Ç–∞') || lowerStr.includes('saturday')) {
    return getNextWeekday(today, 6)
  }

  if (lowerStr.includes('–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ') || lowerStr.includes('sunday')) {
    return getNextWeekday(today, 0)
  }

  // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY –∏–ª–∏ DD/MM/YYYY
  const dateRegex = /(\d{1,2})[./](\d{1,2})[./](\d{4})/
  const match = dateStr.match(dateRegex)
  
  if (match) {
    const day = parseInt(match[1])
    const month = parseInt(match[2]) - 1 // –º–µ—Å—è—Ü—ã –≤ JS –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
    const year = parseInt(match[3])
    return new Date(year, month, day)
  }

  return null
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
 */
function getNextWeekday(fromDate: Date, targetDay: number): Date {
  const result = new Date(fromDate)
  const currentDay = result.getDay()
  const daysUntilTarget = (targetDay - currentDay + 7) % 7
  result.setDate(result.getDate() + daysUntilTarget)
  return result
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 */
export function formatTime(timeStr: string): string {
  const [hours, minutes] = timeStr.split(':')
  const hour = parseInt(hours)
  const minute = parseInt(minutes)
  
  if (hour < 12) {
    return `${hour}:${minutes} (—É—Ç—Ä–æ)`
  } else if (hour < 18) {
    return `${hour}:${minutes} (–¥–µ–Ω—å)`
  } else {
    return `${hour}:${minutes} (–≤–µ—á–µ—Ä)`
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
 */
export function getEventTypeEmoji(eventType?: string): string {
  if (!eventType) return 'üìö'
  
  const type = eventType.toLowerCase()
  
  if (type.includes('–ª–µ–∫—Ü–∏—è') || type.includes('lecture')) {
    return 'üéì'
  }
  
  if (type.includes('—Å–µ–º–∏–Ω–∞—Ä') || type.includes('seminar')) {
    return 'üí¨'
  }
  
  if (type.includes('–ø—Ä–∞–∫—Ç–∏–∫–∞') || type.includes('practice')) {
    return 'üî¨'
  }
  
  if (type.includes('—ç–∫–∑–∞–º–µ–Ω') || type.includes('exam')) {
    return 'üìù'
  }
  
  if (type.includes('–∑–∞—á–µ—Ç') || type.includes('test')) {
    return '‚úÖ'
  }
  
  return 'üìö'
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram MarkdownV2
 * –î–ª—è MarkdownV2 –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å: _*[]()~`>#+-=|{}.!
 * https://core.telegram.org/bots/api#markdownv2-style
 */
export function escapeMarkdown(text: string): string {
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2 (–≤–∫–ª—é—á–∞—è –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª—ç—à)
  return text.replace(/[\\_*[\]()~`>#+=|{}.!-]/g, '\\$&')
}

/**
 * –û–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
 */
export function truncateText(text: string, maxLength: number): string {
  if (text.length <= maxLength) {
    return text
  }
  
  return text.substring(0, maxLength - 3) + '...'
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –≤ —Ä—É—Å—Å–∫–æ–º —Å—Ç–∏–ª–µ
 */
export function formatRussianDate(date: Date): string {
  const options: Intl.DateTimeFormatOptions = {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }
  
  return date.toLocaleDateString('ru-RU', options)
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (—á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏)
 */
export function getRelativeTime(targetDate: Date): string {
  const now = new Date()
  const diffMs = targetDate.getTime() - now.getTime()
  const diffMinutes = Math.floor(diffMs / (1000 * 60))
  const diffHours = Math.floor(diffMinutes / 60)
  const diffDays = Math.floor(diffHours / 24)
  
  if (diffMinutes < 0) {
    return '—É–∂–µ –ø—Ä–æ—à–ª–æ'
  }
  
  if (diffMinutes < 60) {
    return `—á–µ—Ä–µ–∑ ${diffMinutes} –º–∏–Ω`
  }
  
  if (diffHours < 24) {
    return `—á–µ—Ä–µ–∑ ${diffHours} —á`
  }
  
  return `—á–µ—Ä–µ–∑ ${diffDays} –¥–Ω`
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π
 */
export function isToday(date: Date): boolean {
  const today = new Date()
  return date.toDateString() === today.toDateString()
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π
 */
export function isTomorrow(date: Date): boolean {
  const tomorrow = new Date()
  tomorrow.setDate(tomorrow.getDate() + 1)
  return date.toDateString() === tomorrow.toDateString()
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
 */
export function getRussianWeekday(date: Date): string {
  const weekdays = [
    '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
    '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    '–≤—Ç–æ—Ä–Ω–∏–∫',
    '—Å—Ä–µ–¥–∞',
    '—á–µ—Ç–≤–µ—Ä–≥',
    '–ø—è—Ç–Ω–∏—Ü–∞',
    '—Å—É–±–±–æ—Ç–∞'
  ]
  
  return weekdays[date.getDay()]
}
