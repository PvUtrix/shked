import { sendMessage } from './bot'
import { prisma } from '@/lib/db'
import { formatSchedule } from './helpers'

export interface NotificationData {
  userId: string
  scheduleId: string
  message: string
  type: 'reminder' | 'change' | 'summary' | 'broadcast'
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏
 */
export async function sendScheduleReminder(userId: string, scheduleId: string): Promise<boolean> {
  try {
    const telegramUser = await prisma.telegramUser.findUnique({
      where: { userId },
      include: {
        user: {
          include: {
            group: true
          }
        }
      }
    })

    if (!telegramUser || !telegramUser.notifications || !telegramUser.isActive) {
      return false
    }

    const schedule = await prisma.schedule.findUnique({
      where: { id: scheduleId },
      include: {
        subject: true,
        group: true
      }
    })

    if (!schedule) {
      return false
    }

    const message = `üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏*

üìö *${schedule.subject.name}*
‚è∞ –ù–∞—á–∞–ª–æ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç (${schedule.startTime})
üìç ${schedule.location || '–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
üë®‚Äçüè´ ${schedule.subject.instructor || '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω'}

${schedule.description ? `üìù ${schedule.description}` : ''}

–£–¥–∞—á–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è! üéì`

    const success = await sendMessage({
      chat_id: parseInt(telegramUser.chatId),
      text: message,
      parse_mode: 'Markdown'
    })

    return success
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error)
    return false
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
export async function sendScheduleChange(groupId: string, schedule: any): Promise<boolean> {
  try {
    const telegramUsers = await prisma.telegramUser.findMany({
      where: {
        user: {
          groupId: groupId
        },
        notifications: true,
        isActive: true
      },
      include: {
        user: true
      }
    })

    if (telegramUsers.length === 0) {
      return true
    }

    const message = `üì¢ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏*

üìö *${schedule.subject.name}*
üìÖ ${schedule.date.toLocaleDateString('ru-RU')}
‚è∞ ${schedule.startTime} - ${schedule.endTime}
üìç ${schedule.location || '–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
üë®‚Äçüè´ ${schedule.subject.instructor || '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω'}

${schedule.description ? `üìù ${schedule.description}` : ''}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è!`

    let successCount = 0
    for (const telegramUser of telegramUsers) {
      const success = await sendMessage({
        chat_id: parseInt(telegramUser.chatId),
        text: message,
        parse_mode: 'Markdown'
      })
      if (success) successCount++
    }

    console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏: ${successCount}/${telegramUsers.length}`)
    return successCount > 0
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏:', error)
    return false
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
export async function sendDailySummary(userId: string): Promise<boolean> {
  try {
    const telegramUser = await prisma.telegramUser.findUnique({
      where: { userId },
      include: {
        user: {
          include: {
            group: true
          }
        }
      }
    })

    if (!telegramUser || !telegramUser.notifications || !telegramUser.isActive) {
      return false
    }

    const today = new Date()
    const startOfDay = new Date(today)
    startOfDay.setHours(0, 0, 0, 0)
    const endOfDay = new Date(today)
    endOfDay.setHours(23, 59, 59, 999)

    const schedules = await prisma.schedule.findMany({
      where: {
        groupId: telegramUser.user.groupId,
        date: {
          gte: startOfDay,
          lte: endOfDay
        }
      },
      include: {
        subject: true
      },
      orderBy: {
        startTime: 'asc'
      }
    })

    if (schedules.length === 0) {
      const message = `üåÖ *–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!*

üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.
–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üòä`

      return await sendMessage({
        chat_id: parseInt(telegramUser.chatId),
        text: message,
        parse_mode: 'Markdown'
      })
    }

    let message = `üåÖ *–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!*

üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*

`

    schedules.forEach((schedule, index) => {
      message += `${index + 1}. *${schedule.subject.name}*\n`
      message += `   ‚è∞ ${schedule.startTime} - ${schedule.endTime}\n`
      if (schedule.location) {
        message += `   üìç ${schedule.location}\n`
      }
      if (schedule.subject.instructor) {
        message += `   üë®‚Äçüè´ ${schedule.subject.instructor}\n`
      }
      message += `\n`
    })

    message += `–£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è! üéì`

    return await sendMessage({
      chat_id: parseInt(telegramUser.chatId),
      text: message,
      parse_mode: 'Markdown'
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏:', error)
    return false
  }
}

/**
 * –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ
 */
export async function broadcastToGroup(groupId: string, message: string): Promise<{ sent: number, total: number }> {
  try {
    const telegramUsers = await prisma.telegramUser.findMany({
      where: {
        user: {
          groupId: groupId
        },
        notifications: true,
        isActive: true
      }
    })

    if (telegramUsers.length === 0) {
      return { sent: 0, total: 0 }
    }

    let sentCount = 0
    for (const telegramUser of telegramUsers) {
      const success = await sendMessage({
        chat_id: parseInt(telegramUser.chatId),
        text: message,
        parse_mode: 'Markdown'
      })
      if (success) sentCount++
    }

    return { sent: sentCount, total: telegramUsers.length }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –ø–æ –≥—Ä—É–ø–ø–µ:', error)
    return { sent: 0, total: 0 }
  }
}

/**
 * –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 */
export async function broadcastToAll(message: string, role?: string): Promise<{ sent: number, total: number }> {
  try {
    const whereClause: any = {
      notifications: true,
      isActive: true
    }

    if (role) {
      whereClause.user = {
        role: role
      }
    }

    const telegramUsers = await prisma.telegramUser.findMany({
      where: whereClause,
      include: {
        user: true
      }
    })

    if (telegramUsers.length === 0) {
      return { sent: 0, total: 0 }
    }

    let sentCount = 0
    for (const telegramUser of telegramUsers) {
      const success = await sendMessage({
        chat_id: parseInt(telegramUser.chatId),
        text: message,
        parse_mode: 'Markdown'
      })
      if (success) sentCount++
    }

    return { sent: sentCount, total: telegramUsers.length }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –≤—Å–µ–º:', error)
    return { sent: 0, total: 0 }
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
export async function sendTestMessage(userId: string): Promise<boolean> {
  try {
    const telegramUser = await prisma.telegramUser.findUnique({
      where: { userId }
    })

    if (!telegramUser) {
      return false
    }

    const message = `üß™ *–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –®–ö–ï–î.
–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! ‚úÖ

–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`

    return await sendMessage({
      chat_id: parseInt(telegramUser.chatId),
      text: message,
      parse_mode: 'Markdown'
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
    return false
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
 */
export async function sendHomeworkDeadlineReminder(userId: string, homeworkId: string, hoursLeft: number): Promise<boolean> {
  try {
    const telegramUser = await prisma.telegramUser.findUnique({
      where: { userId },
      include: {
        user: {
          include: {
            group: true
          }
        }
      }
    })

    if (!telegramUser || !telegramUser.notifications || !telegramUser.isActive) {
      return false
    }

    const homework = await prisma.homework.findUnique({
      where: { id: homeworkId },
      include: {
        subject: true,
        submissions: {
          where: {
            userId: userId
          }
        }
      }
    })

    if (!homework) {
      return false
    }

    const submission = homework.submissions[0]
    const status = submission ? 
      (submission.status === 'REVIEWED' ? '‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ' : 
       submission.status === 'SUBMITTED' ? 'üì§ –°–¥–∞–Ω–æ' : '‚ùå –ù–µ —Å–¥–∞–Ω–æ') : 
      '‚ùå –ù–µ —Å–¥–∞–Ω–æ'

    const message = `üìù *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏*

üìö *${homework.title}*
üìñ ${homework.subject.name}
‚è∞ –î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ ${hoursLeft} —á–∞—Å–æ–≤
üìä –°—Ç–∞—Ç—É—Å: ${status}

${homework.description ? `üìù ${homework.description}` : ''}

${homework.taskUrl ? `üîó [–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞–Ω–∏–µ](${homework.taskUrl})` : ''}

${status.includes('–ù–µ —Å–¥–∞–Ω–æ') ? '‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≤–æ–≤—Ä–µ–º—è!' : '‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ —Å–¥–∞–Ω–æ!'}`

    const success = await sendMessage({
      chat_id: parseInt(telegramUser.chatId),
      text: message,
      parse_mode: 'Markdown'
    })

    return success
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–µ:', error)
    return false
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏
 */
export async function sendNewHomeworkNotification(groupId: string, homework: any): Promise<boolean> {
  try {
    const telegramUsers = await prisma.telegramUser.findMany({
      where: {
        user: {
          groupId: groupId
        },
        notifications: true,
        isActive: true
      },
      include: {
        user: true
      }
    })

    if (telegramUsers.length === 0) {
      return true
    }

    const deadline = new Date(homework.deadline).toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })

    const message = `üìù *–ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ*

üìö *${homework.title}*
üìñ ${homework.subject.name}
‚è∞ –î–µ–¥–ª–∞–π–Ω: ${deadline}

${homework.description ? `üìù ${homework.description}` : ''}

${homework.taskUrl ? `üîó [–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞–Ω–∏–µ](${homework.taskUrl})` : ''}

–£–¥–∞—á–∏ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏! üéì`

    let successCount = 0
    for (const telegramUser of telegramUsers) {
      const success = await sendMessage({
        chat_id: parseInt(telegramUser.chatId),
        text: message,
        parse_mode: 'Markdown'
      })
      if (success) successCount++
    }

    console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–º –î–ó: ${successCount}/${telegramUsers.length}`)
    return successCount > 0
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –î–ó:', error)
    return false
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
 */
export async function sendHomeworkReviewNotification(userId: string, homework: any, submission: any): Promise<boolean> {
  try {
    const telegramUser = await prisma.telegramUser.findUnique({
      where: { userId },
      include: {
        user: true
      }
    })

    if (!telegramUser || !telegramUser.notifications || !telegramUser.isActive) {
      return false
    }

    const message = `üìù *–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ*

üìö *${homework.title}*
üìñ ${homework.subject.name}
üéØ –û—Ü–µ–Ω–∫–∞: ${submission.grade}/5
üìä –°—Ç–∞—Ç—É—Å: ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ

${submission.comment ? `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:
${submission.comment}` : ''}

–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ`

    const success = await sendMessage({
      chat_id: parseInt(telegramUser.chatId),
      text: message,
      parse_mode: 'Markdown'
    })

    return success
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error)
    return false
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏—è–º
 */
export async function sendWeeklyHomeworkSummary(userId: string): Promise<boolean> {
  try {
    const telegramUser = await prisma.telegramUser.findUnique({
      where: { userId },
      include: {
        user: {
          include: {
            group: true
          }
        }
      }
    })

    if (!telegramUser || !telegramUser.notifications || !telegramUser.isActive) {
      return false
    }

    const now = new Date()
    const weekStart = new Date(now)
    weekStart.setDate(now.getDate() - now.getDay() + 1) // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    const weekEnd = new Date(weekStart)
    weekEnd.setDate(weekStart.getDate() + 6) // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

    const homework = await prisma.homework.findMany({
      where: {
        groupId: telegramUser.user.groupId,
        isActive: true,
        deadline: {
          gte: weekStart,
          lte: weekEnd
        }
      },
      include: {
        subject: true,
        submissions: {
          where: {
            userId: userId
          }
        }
      },
      orderBy: {
        deadline: 'asc'
      }
    })

    if (homework.length === 0) {
      const message = `üìù *–°–≤–æ–¥–∫–∞ –ø–æ –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏—è–º*

üìÖ –ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.
–•–æ—Ä–æ—à–µ–π –Ω–µ–¥–µ–ª–∏! üòä`

      return await sendMessage({
        chat_id: parseInt(telegramUser.chatId),
        text: message,
        parse_mode: 'Markdown'
      })
    }

    let message = `üìù *–°–≤–æ–¥–∫–∞ –ø–æ –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏—è–º –Ω–∞ –Ω–µ–¥–µ–ª—é*

`

    homework.forEach((hw, index) => {
      const submission = hw.submissions[0]
      const status = submission ? 
        (submission.status === 'REVIEWED' ? '‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ' : 
         submission.status === 'SUBMITTED' ? 'üì§ –°–¥–∞–Ω–æ' : '‚ùå –ù–µ —Å–¥–∞–Ω–æ') : 
        '‚ùå –ù–µ —Å–¥–∞–Ω–æ'
      
      const deadline = new Date(hw.deadline).toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      })
      
      message += `${index + 1}. *${hw.title}*\n`
      message += `   üìö ${hw.subject.name}\n`
      message += `   ‚è∞ ${deadline}\n`
      message += `   üìä ${status}\n`
      if (submission?.grade) {
        message += `   üéØ –û—Ü–µ–Ω–∫–∞: ${submission.grade}/5\n`
      }
      message += `\n`
    })

    message += `–£–¥–∞—á–Ω–æ–π –Ω–µ–¥–µ–ª–∏! üéì`

    return await sendMessage({
      chat_id: parseInt(telegramUser.chatId),
      text: message,
      parse_mode: 'Markdown'
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏:', error)
    return false
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export async function getNotificationStats(): Promise<{
  totalUsers: number
  activeUsers: number
  notificationsEnabled: number
  recentActivity: number
}> {
  try {
    const [
      totalUsers,
      activeUsers,
      notificationsEnabled,
      recentActivity
    ] = await Promise.all([
      prisma.telegramUser.count(),
      prisma.telegramUser.count({ where: { isActive: true } }),
      prisma.telegramUser.count({ where: { notifications: true } }),
      prisma.telegramUser.count({
        where: {
          createdAt: {
            gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
          }
        }
      })
    ])

    return {
      totalUsers,
      activeUsers,
      notificationsEnabled,
      recentActivity
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
    return {
      totalUsers: 0,
      activeUsers: 0,
      notificationsEnabled: 0,
      recentActivity: 0
    }
  }
}
