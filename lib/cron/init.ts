import cron from 'node-cron'
import { 
  sendScheduleReminder, 
  sendDailySummary,
  sendHomeworkDeadlineReminder,
  sendWeeklyHomeworkSummary
} from '@/lib/telegram/notifications'
import { prisma } from '@/lib/db'

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö cron –∑–∞–¥–∞—á
 */
export function initializeCronJobs() {
  console.log('üïê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cron –∑–∞–¥–∞—á...')

  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  cron.schedule('*/5 * * * *', async () => {
    console.log('üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–Ω—è—Ç–∏—è—Ö...')
    await checkScheduleReminders()
  })

  // –î–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏ - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:00
  cron.schedule('0 7 * * *', async () => {
    console.log('üìÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö —Å–≤–æ–¥–æ–∫...')
    await sendDailySummaries()
  })

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π - –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
  cron.schedule('0 */2 * * *', async () => {
    console.log('üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π...')
    await checkHomeworkDeadlines()
  })

  // –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Å–≤–æ–¥–∫–∏ –ø–æ –î–ó - –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 8:00
  cron.schedule('0 8 * * 1', async () => {
    console.log('üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–≤–æ–¥–æ–∫ –ø–æ –î–ó...')
    await sendWeeklyHomeworkSummaries()
  })

  console.log('‚úÖ Cron –∑–∞–¥–∞—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã')
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö
 */
async function checkScheduleReminders() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
    const botSettings = await prisma.botSettings.findFirst({
      orderBy: { createdAt: 'desc' }
    })

    if (!botSettings?.isActive || !botSettings.notificationsEnabled) {
      return
    }

    const reminderMinutes = botSettings.reminderMinutes || 30
    const now = new Date()
    const reminderTime = new Date(now.getTime() + reminderMinutes * 60 * 1000)

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–Ω—è—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    const upcomingSchedules = await prisma.schedule.findMany({
      where: {
        date: {
          gte: now,
          lte: reminderTime
        }
      },
      include: {
        subject: true,
        group: {
          include: {
            users: {
              include: {
                telegramUser: {
                  where: {
                    isActive: true,
                    notifications: true
                  }
                }
              }
            }
          }
        }
      }
    })

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${upcomingSchedules.length} –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π`)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    for (const schedule of upcomingSchedules) {
      if (schedule.group?.users) {
        for (const user of schedule.group.users) {
          if (user.telegramUser && user.telegramUser.isActive) {
            await sendScheduleReminder(user.id, schedule.id)
            console.log(`–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.firstName} ${user.lastName}`)
          }
        }
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error)
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 */
async function sendDailySummaries() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
    const botSettings = await prisma.botSettings.findFirst({
      orderBy: { createdAt: 'desc' }
    })

    if (!botSettings?.isActive || !botSettings.notificationsEnabled) {
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram
    const telegramUsers = await prisma.telegramUser.findMany({
      where: {
        isActive: true,
        notifications: true
      },
      include: {
        user: true
      }
    })

    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö —Å–≤–æ–¥–æ–∫ ${telegramUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫–∏
    for (const telegramUser of telegramUsers) {
      await sendDailySummary(telegramUser.userId)
      console.log(`–î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramUser.user.firstName} ${telegramUser.user.lastName}`)
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–Ω–µ–≤–Ω—ã—Ö —Å–≤–æ–¥–æ–∫:', error)
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
 */
async function checkHomeworkDeadlines() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
    const botSettings = await prisma.botSettings.findFirst({
      orderBy: { createdAt: 'desc' }
    })

    if (!botSettings?.isActive || !botSettings.notificationsEnabled) {
      return
    }

    const now = new Date()
    const tomorrow = new Date(now.getTime() + 24 * 60 * 60 * 1000)
    const twoHoursFromNow = new Date(now.getTime() + 2 * 60 * 60 * 1000)

    // –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞
    const homeworkWithDeadlines = await prisma.homework.findMany({
      where: {
        isActive: true,
        deadline: {
          gte: now,
          lte: tomorrow
        }
      },
      include: {
        group: {
          include: {
            users: {
              include: {
                telegramUser: {
                  where: {
                    isActive: true,
                    notifications: true
                  }
                }
              }
            }
          }
        }
      }
    })

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${homeworkWithDeadlines.length} –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π —Å –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–º–∏—Å—è –¥–µ–¥–ª–∞–π–Ω–∞–º–∏`)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    for (const homework of homeworkWithDeadlines) {
      if (homework.group?.users) {
        for (const user of homework.group.users) {
          if (user.telegramUser && user.telegramUser.isActive) {
            const hoursLeft = Math.ceil((homework.deadline.getTime() - now.getTime()) / (1000 * 60 * 60))
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞ –∏ –∑–∞ 2 —á–∞—Å–∞
            if (hoursLeft <= 24 && hoursLeft > 22) {
              await sendHomeworkDeadlineReminder(user.id, homework.id, hoursLeft)
              console.log(`–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –î–ó –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.firstName} ${user.lastName} (24 —á–∞—Å–∞)`)
            } else if (hoursLeft <= 2 && hoursLeft > 0) {
              await sendHomeworkDeadlineReminder(user.id, homework.id, hoursLeft)
              console.log(`–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –î–ó –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.firstName} ${user.lastName} (2 —á–∞—Å–∞)`)
            }
          }
        }
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –î–ó:', error)
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Å–≤–æ–¥–∫–∏ –ø–æ –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏—è–º
 */
async function sendWeeklyHomeworkSummaries() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
    const botSettings = await prisma.botSettings.findFirst({
      orderBy: { createdAt: 'desc' }
    })

    if (!botSettings?.isActive || !botSettings.notificationsEnabled) {
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram
    const telegramUsers = await prisma.telegramUser.findMany({
      where: {
        isActive: true,
        notifications: true
      },
      include: {
        user: true
      }
    })

    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–≤–æ–¥–æ–∫ –ø–æ –î–ó ${telegramUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫–∏
    for (const telegramUser of telegramUsers) {
      await sendWeeklyHomeworkSummary(telegramUser.userId)
      console.log(`–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –î–ó –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramUser.user.firstName} ${telegramUser.user.lastName}`)
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–≤–æ–¥–æ–∫ –ø–æ –î–ó:', error)
  }
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ cron –∑–∞–¥–∞—á–∏
 */
export function stopCronJobs() {
  console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ cron –∑–∞–¥–∞—á...')
  cron.getTasks().forEach(task => {
    task.stop()
  })
  console.log('‚úÖ Cron –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
}
