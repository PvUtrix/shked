import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/db'
import bcryptjs from 'bcryptjs'

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º —Ä–æ—É—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º
export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    const { email, password } = await request.json()
    
    if (!email || !password) {
      return NextResponse.json({ 
        error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      }, { status: 400 })
    }

    console.log(`üîç Testing authentication for: ${email}`)

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { email },
      include: { group: true }
    })

    if (!user) {
      console.log(`‚ùå User not found: ${email}`)
      return NextResponse.json({ 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        step: 'user_lookup',
        success: false
      }, { status: 404 })
    }

    console.log(`‚úÖ User found: ${user.email} (${user.role})`)

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await bcryptjs.compare(password, user.password)

    if (!isPasswordValid) {
      console.log(`‚ùå Invalid password for: ${email}`)
      return NextResponse.json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å',
        step: 'password_check',
        success: false
      }, { status: 401 })
    }

    console.log(`‚úÖ Password valid for: ${email}`)

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º NextAuth —Å–µ—Å—Å–∏—é
    const session = await getServerSession(authOptions)
    console.log(`üîç Current session:`, session ? 'EXISTS' : 'NULL')

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ (—Å–∏–º—É–ª—è—Ü–∏—è NextAuth)
    const jwtPayload = {
      sub: user.id,
      email: user.email,
      name: user.name,
      role: user.role,
      groupId: user.groupId,
      iat: Math.floor(Date.now() / 1000),
      exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // 24 hours
    }

    console.log(`‚úÖ JWT payload created for: ${email}`)

    return NextResponse.json({
      message: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö',
      user: {
        id: user.id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        role: user.role,
        groupId: user.groupId
      },
      steps: {
        user_lookup: 'SUCCESS',
        password_check: 'SUCCESS',
        session_check: session ? 'EXISTS' : 'NONE',
        jwt_creation: 'SUCCESS'
      },
      success: true
    })

  } catch (error) {
    console.error('‚ùå Auth debug error:', error)
    return NextResponse.json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error instanceof Error ? error.message : 'Unknown error',
      step: 'error_handling',
      success: false
    }, { status: 500 })
  }
}

export async function GET() {
  try {
    const session = await getServerSession(authOptions)
    
    return NextResponse.json({
      message: 'Auth debug info',
      session: session ? {
        user: session.user,
        expires: session.expires
      } : null,
      authOptions: {
        providers: authOptions.providers?.length || 0,
        session: authOptions.session?.strategy || 'unknown',
        callbacks: Object.keys(authOptions.callbacks || {})
      }
    })

  } catch (error) {
    console.error('‚ùå Auth debug GET error:', error)
    return NextResponse.json({ 
      error: 'Auth debug error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
