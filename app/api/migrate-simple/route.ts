import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º —Ä–æ—É—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º
export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ production –±–µ–∑ —è–≤–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    const { force } = await request.json().catch(() => ({}))
    
    if (process.env.NODE_ENV === 'production' && !force) {
      return NextResponse.json({ 
        error: '–î–ª—è production —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä force: true' 
      }, { status: 400 })
    }

    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    const existingColumns = await prisma.$queryRaw`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'users' 
      AND column_name IN ('canHelp', 'lookingFor')
    `

    console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:', existingColumns)

    const results = []

    // –î–æ–±–∞–≤–ª—è–µ–º canHelp –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!Array.isArray(existingColumns) || existingColumns.length === 0 || 
        !existingColumns.some((col: any) => col.column_name === 'canHelp')) {
      try {
        await prisma.$executeRaw`ALTER TABLE users ADD COLUMN "canHelp" TEXT`
        results.push('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ canHelp')
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ canHelp')
      } catch (error) {
        results.push(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è canHelp: ${error instanceof Error ? error.message : 'Unknown error'}`)
        console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è canHelp:', error)
      }
    } else {
      results.push('‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ canHelp —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    }

    // –î–æ–±–∞–≤–ª—è–µ–º lookingFor –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!Array.isArray(existingColumns) || existingColumns.length === 0 || 
        !existingColumns.some((col: any) => col.column_name === 'lookingFor')) {
      try {
        await prisma.$executeRaw`ALTER TABLE users ADD COLUMN "lookingFor" TEXT`
        results.push('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ lookingFor')
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ lookingFor')
      } catch (error) {
        results.push(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è lookingFor: ${error instanceof Error ? error.message : 'Unknown error'}`)
        console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è lookingFor:', error)
      }
    } else {
      results.push('‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ lookingFor —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    }

    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

    return NextResponse.json({
      message: '–ü—Ä–æ—Å—Ç–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
      results,
      existingColumns
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    return NextResponse.json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
