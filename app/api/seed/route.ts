import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'
import bcryptjs from 'bcryptjs'

const prisma = new PrismaClient()

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º —Ä–æ—É—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º
export const dynamic = 'force-dynamic'

// POST - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ production –±–µ–∑ —è–≤–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    const { force } = await request.json().catch(() => ({}))
    
    if (process.env.NODE_ENV === 'production' && !force) {
      return NextResponse.json({ 
        error: '–î–ª—è production —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä force: true' 
      }, { status: 400 })
    }

    console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö 8 —Ä–æ–ª–µ–π
    const adminPassword = await bcryptjs.hash('admin123', 12)
    const admin = await prisma.user.upsert({
      where: { email: 'admin@shked.com' },
      update: {},
      create: {
        email: 'admin@shked.com',
        password: adminPassword,
        firstName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        lastName: '–°–∏—Å—Ç–µ–º—ã',
        name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º—ã',
        role: 'admin',
      },
    })

    const studentPassword = await bcryptjs.hash('student123', 12)
    const student = await prisma.user.upsert({
      where: { email: 'student@demo.com' },
      update: {},
      create: {
        email: 'student@demo.com',
        password: studentPassword,
        firstName: '–î–µ–º–æ',
        lastName: '–°—Ç—É–¥–µ–Ω—Ç',
        name: '–î–µ–º–æ –°—Ç—É–¥–µ–Ω—Ç',
        role: 'student',
      },
    })

    const teacherPassword = await bcryptjs.hash('teacher123', 12)
    const teacher = await prisma.user.upsert({
      where: { email: 'teacher@demo.com' },
      update: {},
      create: {
        email: 'teacher@demo.com',
        password: teacherPassword,
        firstName: '–î–µ–º–æ',
        lastName: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
        name: '–î–µ–º–æ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
        role: 'teacher',
      },
    })

    const mentorPassword = await bcryptjs.hash('mentor123', 12)
    const mentor = await prisma.user.upsert({
      where: { email: 'mentor@demo.com' },
      update: {},
      create: {
        email: 'mentor@demo.com',
        password: mentorPassword,
        firstName: '–î–µ–º–æ',
        lastName: '–ú–µ–Ω—Ç–æ—Ä',
        name: '–î–µ–º–æ –ú–µ–Ω—Ç–æ—Ä',
        role: 'mentor',
      },
    })

    const assistantPassword = await bcryptjs.hash('assistant123', 12)
    const assistant = await prisma.user.upsert({
      where: { email: 'assistant@demo.com' },
      update: {},
      create: {
        email: 'assistant@demo.com',
        password: assistantPassword,
        firstName: '–î–µ–º–æ',
        lastName: '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç',
        name: '–î–µ–º–æ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç',
        role: 'assistant',
      },
    })

    const coTeacherPassword = await bcryptjs.hash('coteacher123', 12)
    const coTeacher = await prisma.user.upsert({
      where: { email: 'coteacher@demo.com' },
      update: {},
      create: {
        email: 'coteacher@demo.com',
        password: coTeacherPassword,
        firstName: '–î–µ–º–æ',
        lastName: '–°–æ-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
        name: '–î–µ–º–æ –°–æ-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
        role: 'co_teacher',
      },
    })

    const eduOfficePassword = await bcryptjs.hash('eduoffice123', 12)
    const eduOffice = await prisma.user.upsert({
      where: { email: 'eduoffice@demo.com' },
      update: {},
      create: {
        email: 'eduoffice@demo.com',
        password: eduOfficePassword,
        firstName: '–î–µ–º–æ',
        lastName: '–£—á–µ–±–Ω—ã–π –æ—Ç–¥–µ–ª',
        name: '–î–µ–º–æ –£—á–µ–±–Ω—ã–π –æ—Ç–¥–µ–ª',
        role: 'education_office_head',
      },
    })

    const deptAdminPassword = await bcryptjs.hash('deptadmin123', 12)
    const deptAdmin = await prisma.user.upsert({
      where: { email: 'deptadmin@demo.com' },
      update: {},
      create: {
        email: 'deptadmin@demo.com',
        password: deptAdminPassword,
        firstName: '–î–µ–º–æ',
        lastName: '–ê–¥–º–∏–Ω –∫–∞—Ñ–µ–¥—Ä—ã',
        name: '–î–µ–º–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–∞—Ñ–µ–¥—Ä—ã',
        role: 'department_admin',
      },
    })

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!')

    return NextResponse.json({
      message: '–¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ! (8 —Ä–æ–ª–µ–π)',
      users: [
        { email: 'admin@shked.com', password: 'admin123', role: 'admin' },
        { email: 'student@demo.com', password: 'student123', role: 'student' },
        { email: 'teacher@demo.com', password: 'teacher123', role: 'teacher' },
        { email: 'mentor@demo.com', password: 'mentor123', role: 'mentor' },
        { email: 'assistant@demo.com', password: 'assistant123', role: 'assistant' },
        { email: 'coteacher@demo.com', password: 'coteacher123', role: 'co_teacher' },
        { email: 'eduoffice@demo.com', password: 'eduoffice123', role: 'education_office_head' },
        { email: 'deptadmin@demo.com', password: 'deptadmin123', role: 'department_admin' },
      ]
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
    return NextResponse.json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

// GET - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export async function GET() {
  try {
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        firstName: true,
        lastName: true,
        role: true,
        createdAt: true
      }
    })

    return NextResponse.json({
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
      count: users.length,
      users
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
    return NextResponse.json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    }, { status: 500 })
  }
}
