import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/db'
import fs from 'fs/promises'
import path from 'path'

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
const TEMPLATES_DIR = path.join(process.cwd(), 'data', 'templates')

// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
async function ensureTemplatesDir() {
  try {
    await fs.access(TEMPLATES_DIR)
  } catch {
    await fs.mkdir(TEMPLATES_DIR, { recursive: true })
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
async function getAllData() {
  const [
    users,
    groups,
    subjects,
    schedules,
    homework,
    homeworkSubmissions,
    telegramUsers,
    userGroups,
    attendance,
    exams,
    examResults,
    mentorMeetings,
    forumTopics,
    forumPosts,
    subjectDocuments,
    externalResources,
    subgroups,
    subgroupStudents,
    subjectTeachers,
  ] = await Promise.all([
    prisma.user.findMany(),
    prisma.group.findMany(),
    prisma.subject.findMany(),
    prisma.schedule.findMany(),
    prisma.homework.findMany(),
    prisma.homeworkSubmission.findMany(),
    prisma.telegramUser.findMany(),
    prisma.userGroup.findMany(),
    prisma.attendance.findMany(),
    prisma.exam.findMany(),
    prisma.examResult.findMany(),
    prisma.mentorMeeting.findMany(),
    prisma.forumTopic.findMany(),
    prisma.forumPost.findMany(),
    prisma.subjectDocument.findMany(),
    prisma.externalResource.findMany(),
    prisma.subgroup.findMany(),
    prisma.subgroupStudent.findMany(),
    prisma.subjectTeacher.findMany(),
  ])

  return {
    users,
    groups,
    subjects,
    schedules,
    homework,
    homeworkSubmissions,
    telegramUsers,
    userGroups,
    attendance,
    exams,
    examResults,
    mentorMeetings,
    forumTopics,
    forumPosts,
    subjectDocuments,
    externalResources,
    subgroups,
    subgroupStudents,
    subjectTeachers,
  }
}

// –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function clearDatabase() {
  // –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å —É—á–µ—Ç–æ–º foreign keys)
  await prisma.homeworkSubmission.deleteMany()
  await prisma.homework.deleteMany()
  await prisma.attendance.deleteMany()
  await prisma.examResult.deleteMany()
  await prisma.exam.deleteMany()
  await prisma.mentorMeeting.deleteMany()
  await prisma.forumPost.deleteMany()
  await prisma.forumTopic.deleteMany()
  await prisma.subgroupStudent.deleteMany()
  await prisma.subgroup.deleteMany()
  await prisma.subjectTeacher.deleteMany()
  await prisma.subjectDocument.deleteMany()
  await prisma.externalResource.deleteMany()
  await prisma.schedule.deleteMany()
  await prisma.userGroup.deleteMany()
  await prisma.telegramUser.deleteMany()
  await prisma.subject.deleteMany()
  await prisma.group.deleteMany()
  await prisma.user.deleteMany()
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —à–∞–±–ª–æ–Ω–∞
async function restoreData(data: any) {
  // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  if (data.users?.length > 0) {
    for (const user of data.users) {
      await prisma.user.create({ data: user })
    }
  }

  if (data.groups?.length > 0) {
    for (const group of data.groups) {
      await prisma.group.create({ data: group })
    }
  }

  if (data.subjects?.length > 0) {
    for (const subject of data.subjects) {
      await prisma.subject.create({ data: subject })
    }
  }

  if (data.telegramUsers?.length > 0) {
    for (const telegramUser of data.telegramUsers) {
      await prisma.telegramUser.create({ data: telegramUser })
    }
  }

  if (data.userGroups?.length > 0) {
    for (const userGroup of data.userGroups) {
      await prisma.userGroup.create({ data: userGroup })
    }
  }

  if (data.schedules?.length > 0) {
    for (const schedule of data.schedules) {
      await prisma.schedule.create({ data: schedule })
    }
  }

  if (data.subjectTeachers?.length > 0) {
    for (const subjectTeacher of data.subjectTeachers) {
      await prisma.subjectTeacher.create({ data: subjectTeacher })
    }
  }

  if (data.subjectDocuments?.length > 0) {
    for (const doc of data.subjectDocuments) {
      await prisma.subjectDocument.create({ data: doc })
    }
  }

  if (data.externalResources?.length > 0) {
    for (const resource of data.externalResources) {
      await prisma.externalResource.create({ data: resource })
    }
  }

  if (data.subgroups?.length > 0) {
    for (const subgroup of data.subgroups) {
      await prisma.subgroup.create({ data: subgroup })
    }
  }

  if (data.subgroupStudents?.length > 0) {
    for (const subgroupStudent of data.subgroupStudents) {
      await prisma.subgroupStudent.create({ data: subgroupStudent })
    }
  }

  if (data.attendance?.length > 0) {
    for (const att of data.attendance) {
      await prisma.attendance.create({ data: att })
    }
  }

  if (data.exams?.length > 0) {
    for (const exam of data.exams) {
      await prisma.exam.create({ data: exam })
    }
  }

  if (data.examResults?.length > 0) {
    for (const result of data.examResults) {
      await prisma.examResult.create({ data: result })
    }
  }

  if (data.mentorMeetings?.length > 0) {
    for (const meeting of data.mentorMeetings) {
      await prisma.mentorMeeting.create({ data: meeting })
    }
  }

  if (data.forumTopics?.length > 0) {
    for (const topic of data.forumTopics) {
      await prisma.forumTopic.create({ data: topic })
    }
  }

  if (data.forumPosts?.length > 0) {
    for (const post of data.forumPosts) {
      await prisma.forumPost.create({ data: post })
    }
  }

  if (data.homework?.length > 0) {
    for (const hw of data.homework) {
      await prisma.homework.create({ data: hw })
    }
  }

  if (data.homeworkSubmissions?.length > 0) {
    for (const submission of data.homeworkSubmissions) {
      await prisma.homeworkSubmission.create({ data: submission })
    }
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!session?.user || session.user.role !== 'admin') {
      return NextResponse.json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' }, { status: 403 })
    }

    const body = await request.json()
    const { action, name } = body

    if (!action || !name) {
      return NextResponse.json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã action –∏ name' }, { status: 400 })
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è path traversal
    if (!/^[a-zA-Z0-9_-]+$/.test(name)) {
      return NextResponse.json({ 
        error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —à–∞–±–ª–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ' 
      }, { status: 400 })
    }

    await ensureTemplatesDir()

    const templatePath = path.join(TEMPLATES_DIR, `${name}.json`)

    if (action === 'save') {
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ "${name}"...`)
      
      const data = await getAllData()
      const snapshot = {
        name,
        createdAt: new Date().toISOString(),
        data,
      }

      await fs.writeFile(templatePath, JSON.stringify(snapshot, null, 2), 'utf-8')

      console.log(`‚úÖ –®–∞–±–ª–æ–Ω "${name}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω`)

      return NextResponse.json({
        success: true,
        message: `–®–∞–±–ª–æ–Ω "${name}" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω`,
        snapshot: {
          name: snapshot.name,
          createdAt: snapshot.createdAt,
          stats: {
            users: data.users.length,
            groups: data.groups.length,
            subjects: data.subjects.length,
            schedules: data.schedules.length,
            homework: data.homework.length,
          },
        },
      })
    } else if (action === 'restore') {
      // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞
      console.log(`üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ "${name}"...`)

      try {
        await fs.access(templatePath)
      } catch {
        return NextResponse.json({ error: `–®–∞–±–ª–æ–Ω "${name}" –Ω–µ –Ω–∞–π–¥–µ–Ω` }, { status: 404 })
      }

      const fileContent = await fs.readFile(templatePath, 'utf-8')
      const snapshot = JSON.parse(fileContent)

      // –û—á–∏—â–∞–µ–º –±–∞–∑—É
      console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
      await clearDatabase()

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      console.log('üì¶ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...')
      await restoreData(snapshot.data)

      console.log(`‚úÖ –®–∞–±–ª–æ–Ω "${name}" –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`)

      return NextResponse.json({
        success: true,
        message: `–®–∞–±–ª–æ–Ω "${name}" —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`,
        stats: {
          users: snapshot.data.users?.length || 0,
          groups: snapshot.data.groups?.length || 0,
          subjects: snapshot.data.subjects?.length || 0,
          schedules: snapshot.data.schedules?.length || 0,
          homework: snapshot.data.homework?.length || 0,
        },
      })
    } else if (action === 'list') {
      // –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
      const files = await fs.readdir(TEMPLATES_DIR)
      const templates = files.filter((f) => f.endsWith('.json')).map((f) => f.replace('.json', ''))

      return NextResponse.json({
        success: true,
        templates,
      })
    } else {
      return NextResponse.json({ error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' }, { status: 400 })
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —à–∞–±–ª–æ–Ω–æ–º:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —à–∞–±–ª–æ–Ω–æ–º', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    )
  }
}

// GET - —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
export async function GET() {
  try {
    await ensureTemplatesDir()
    const files = await fs.readdir(TEMPLATES_DIR)
    const templates = []

    for (const file of files) {
      if (file.endsWith('.json')) {
        const content = await fs.readFile(path.join(TEMPLATES_DIR, file), 'utf-8')
        const snapshot = JSON.parse(content)
        templates.push({
          name: snapshot.name,
          createdAt: snapshot.createdAt,
          stats: {
            users: snapshot.data.users?.length || 0,
            groups: snapshot.data.groups?.length || 0,
            subjects: snapshot.data.subjects?.length || 0,
          },
        })
      }
    }

    return NextResponse.json({
      success: true,
      templates,
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤' },
      { status: 500 }
    )
  }
}

