import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    const session = await getServerSession(authOptions)
    if (!session?.user || session.user.role !== 'admin') {
      return NextResponse.json(
        { error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏.' },
        { status: 403 }
      )
    }

    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã homework_comments...')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
    const tableExists = await prisma.$queryRaw`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public'
        AND table_name = 'homework_comments'
      );
    `

    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', tableExists)

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "homework_comments" (
        "id" TEXT NOT NULL,
        "submissionId" TEXT NOT NULL,
        "authorId" TEXT NOT NULL,
        "content" TEXT NOT NULL,
        "startOffset" INTEGER NOT NULL,
        "endOffset" INTEGER NOT NULL,
        "selectedText" TEXT NOT NULL,
        "resolved" BOOLEAN NOT NULL DEFAULT false,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,

        CONSTRAINT "homework_comments_pkey" PRIMARY KEY ("id")
      );
    `

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ homework_comments —Å–æ–∑–¥–∞–Ω–∞')

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
    await prisma.$executeRaw`
      DO $$ 
      BEGIN
        IF NOT EXISTS (
          SELECT 1 FROM pg_constraint 
          WHERE conname = 'homework_comments_submissionId_fkey'
        ) THEN
          ALTER TABLE "homework_comments" 
          ADD CONSTRAINT "homework_comments_submissionId_fkey" 
          FOREIGN KEY ("submissionId") REFERENCES "homework_submissions"("id") 
          ON DELETE CASCADE ON UPDATE CASCADE;
        END IF;
      END $$;
    `

    console.log('‚úÖ –í–Ω–µ—à–Ω–∏–π –∫–ª—é—á –¥–ª—è submissionId —Å–æ–∑–¥–∞–Ω')

    await prisma.$executeRaw`
      DO $$ 
      BEGIN
        IF NOT EXISTS (
          SELECT 1 FROM pg_constraint 
          WHERE conname = 'homework_comments_authorId_fkey'
        ) THEN
          ALTER TABLE "homework_comments" 
          ADD CONSTRAINT "homework_comments_authorId_fkey" 
          FOREIGN KEY ("authorId") REFERENCES "users"("id") 
          ON DELETE CASCADE ON UPDATE CASCADE;
        END IF;
      END $$;
    `

    console.log('‚úÖ –í–Ω–µ—à–Ω–∏–π –∫–ª—é—á –¥–ª—è authorId —Å–æ–∑–¥–∞–Ω')

    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')

    return NextResponse.json({
      success: true,
      message: '–¢–∞–±–ª–∏—Ü–∞ homework_comments —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏'
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

// GET - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã homework_comments
export async function GET() {
  try {
    const session = await getServerSession(authOptions)
    if (!session?.user || session.user.role !== 'admin') {
      return NextResponse.json(
        { error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' },
        { status: 403 }
      )
    }

    const result = await prisma.$queryRaw`
      SELECT column_name, data_type, is_nullable
      FROM information_schema.columns 
      WHERE table_name = 'homework_comments' 
      ORDER BY ordinal_position
    `

    return NextResponse.json({
      message: '–°—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã homework_comments',
      columns: result
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ö–µ–º—ã:', error)
    return NextResponse.json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

