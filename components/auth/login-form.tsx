
'use client'

import { useState } from 'react'
import { signIn } from 'next-auth/react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Mail, Lock, LogIn } from 'lucide-react'
import { useToast } from '@/hooks/use-toast'

export function LoginForm() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const { toast } = useToast()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)

    try {
      const result = await signIn('credentials', {
        email,
        password,
        redirect: false,
      })

      if (result?.error) {
        toast({
          title: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞',
          description: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
          variant: 'destructive',
        })
        setIsLoading(false)
      } else if (result?.ok) {
        // –î–ª—è –¥–µ–º–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ email –∏ –¥–µ–ª–∞–µ–º –ø—Ä—è–º–æ–π —Ä–µ–¥–∏—Ä–µ–∫—Ç
        const normalizedEmail = email.toLowerCase().trim()
        let redirectPath = '/student' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if (normalizedEmail === 'admin@shked.com' || normalizedEmail === 'john@doe.com') {
          redirectPath = '/admin'
        } else if (normalizedEmail === 'lector@demo.com') {
          redirectPath = '/lector'
        } else if (normalizedEmail === 'assistant@demo.com') {
          redirectPath = '/assistant'
        } else if (normalizedEmail === 'coteacher@demo.com') {
          redirectPath = '/lector'
        } else if (normalizedEmail === 'mentor@demo.com') {
          redirectPath = '/mentor'
        } else if (normalizedEmail === 'eduoffice@demo.com') {
          redirectPath = '/education-office'
        } else if (normalizedEmail === 'deptadmin@demo.com') {
          redirectPath = '/department'
        } else if (normalizedEmail.includes('student123@demo.com') || normalizedEmail.endsWith('@student.mipt.ru')) {
          redirectPath = '/student'
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)
        toast({
          title: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
          description: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –®–∫–µ–¥!',
        })
        
        // –ñ–¥–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cookie —Å–µ—Å—Å–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        // –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è e2e —Ç–µ—Å—Ç–æ–≤, –≥–¥–µ Playwright –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø
        let sessionReady = false
        let attempts = 0
        while (!sessionReady && attempts < 20) {
          try {
            const response = await fetch('/api/auth/session', {
              credentials: 'include',
              cache: 'no-store'
            })
            const session = await response.json()
            if (session?.user) {
              sessionReady = true
              break
            }
          } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
          }
          await new Promise(resolve => setTimeout(resolve, 100))
          attempts++
        }
        
        // –î–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏
        window.location.replace(redirectPath)
      }
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ',
        variant: 'destructive',
      })
      setIsLoading(false)
    }
  }

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader className="text-center">
        <CardTitle className="text-2xl font-bold">–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</CardTitle>
        <CardDescription>
          –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –®–∫–µ–¥
        </CardDescription>
        <div className="mt-4 p-3 bg-muted rounded-lg text-sm">
          <p className="font-medium mb-2">–î–µ–º–æ –∞–∫–∫–∞—É–Ω—Ç—ã (8 —Ä–æ–ª–µ–π):</p>
          <div className="grid grid-cols-2 gap-x-4 gap-y-1 text-xs">
            <p><strong>üë®‚Äçüíº –ê–¥–º–∏–Ω:</strong> admin@shked.com / admin123</p>
            <p><strong>üéì –°—Ç—É–¥–µ–Ω—Ç:</strong> student@demo.com / student123</p>
            <p><strong>üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</strong> lector@demo.com / lector123</p>
            <p><strong>üë§ –ú–µ–Ω—Ç–æ—Ä:</strong> mentor@demo.com / mentor123</p>
            <p><strong>ü§ù –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:</strong> assistant@demo.com / assistant123</p>
            <p><strong>üë• –°–æ-–ø—Ä–µ–ø–æ–¥:</strong> coteacher@demo.com / coteacher123</p>
            <p><strong>üìä –£—á–µ–±–Ω—ã–π –æ—Ç–¥–µ–ª:</strong> eduoffice@demo.com / eduoffice123</p>
            <p><strong>üèõÔ∏è –ê–¥–º–∏–Ω –∫–∞—Ñ–µ–¥—Ä—ã:</strong> deptadmin@demo.com / deptadmin123</p>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <div className="relative">
              <Mail className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
              <Input
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                className="pl-10"
              />
            </div>
          </div>
          <div className="space-y-2">
            <div className="relative">
              <Lock className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
              <Input
                type="password"
                placeholder="–ü–∞—Ä–æ–ª—å"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                className="pl-10"
              />
            </div>
          </div>
          <Button type="submit" className="w-full" disabled={isLoading}>
            <LogIn className="w-4 h-4 mr-2" />
            {isLoading ? '–í—Ö–æ–¥–∏–º...' : '–í–æ–π—Ç–∏'}
          </Button>
        </form>
      </CardContent>
    </Card>
  )
}
